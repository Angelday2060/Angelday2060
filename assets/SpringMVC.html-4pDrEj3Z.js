import{_ as s,c as a,d as e,o as p}from"./app-BuZoRmWt.js";const t={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="springmvc" tabindex="-1"><a class="header-anchor" href="#springmvc"><span>SpringMVC</span></a></h1><ul><li>SpringMVC 技术与 Servlet 技术功能相同，均属于Web层开发技术</li><li>SpringMVC 是一种基于Java实现的MVC模型的轻量级Web框架</li><li>相较于 Servlet 使用简单，开发便捷，灵活性强。</li></ul><p>由于目前绝大多数项目都是使用Springboot框架开发，所以本文只讲述一些重要概念，而不去实现。</p><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h2><h3 id="第一步-导坐标" tabindex="-1"><a class="header-anchor" href="#第一步-导坐标"><span>第一步：导坐标</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二步-创建springmvc控制器类" tabindex="-1"><a class="header-anchor" href="#第二步-创建springmvc控制器类"><span>第二步：创建SpringMVC控制器类</span></a></h3><p>等同于Servlet功能</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Controller</span>					    <span class="token comment">//声明这个类是一个Bean	1</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> userControler <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span>    <span class="token comment">//设置当前操作的访问路径	2</span></span>
<span class="line">    <span class="token annotation punctuation">@ResponseBody</span>			    <span class="token comment">//设置当前操作的返回值类型3</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;user save...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;{&#39;info&#39;:&#39;springmvc&#39;}&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第三步-创建springmvc的配置类" tabindex="-1"><a class="header-anchor" href="#第三步-创建springmvc的配置类"><span>第三步：创建SpringMVC的配置类</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span> </span>
<span class="line"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.protectark.mysqlt&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMvcConfig</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第四步-定义一个servlet容器启动的配置类-在里面加载spring的配置" tabindex="-1"><a class="header-anchor" href="#第四步-定义一个servlet容器启动的配置类-在里面加载spring的配置"><span>第四步：定义一个servlet容器启动的配置类，在里面加载spring的配置</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> servletInConfig <span class="token keyword">extends</span> <span class="token class-name">AbstractDispatcherServletInitializer</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//加载SpringMVC容器配置</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createServletApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">AnnotationConfigWebApplicationContext</span> act <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//注册配置</span></span>
<span class="line">        act<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">SpringMvcConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> act<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//设置那些请求归属springMVC处理</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//设置所有请求归SpringMVC管理</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//加载spring容器配置</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注解说明" tabindex="-1"><a class="header-anchor" href="#注解说明"><span>注解说明</span></a></h3><p>在以上案例中，出现了一些新的注解</p><table><thead><tr><th style="text-align:center;">注解</th><th style="text-align:center;">类型</th><th style="text-align:center;">位置</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">@Controller</td><td style="text-align:center;">类注解</td><td style="text-align:center;">SpringMVC控制器类上</td><td style="text-align:center;">设定SpringMvc的核心控制器bean</td></tr><tr><td style="text-align:center;">@RequestMapping（地址）</td><td style="text-align:center;">方法注解</td><td style="text-align:center;">SpringMVC控制器类中方法上</td><td style="text-align:center;">设置当前控制器方法请求访问路径</td></tr><tr><td style="text-align:center;">@ResponseBody</td><td style="text-align:center;">方法注解</td><td style="text-align:center;">SpringMVC控制器方法定义上方</td><td style="text-align:center;">设置当前控制器方法响应内容为当前返回值，无需解析</td></tr></tbody></table><h3 id="工作流程说明" tabindex="-1"><a class="header-anchor" href="#工作流程说明"><span>工作流程说明</span></a></h3><p>启动服务器初始化过程</p><ol><li>服务器启动，执行ServletContainersInitConfig类，初始化web容器</li><li>执行createServletApplicationContext方法，创建了webApplicationcontext对象</li><li>加载SpringMvcConfig</li><li>执行@ComponentScan加载对应的bean</li><li>加载UserController，每个@RequestMapping的名称对应一个具体的方法</li><li>执行getServletMappings方法，定义所有的请求都通过springMVC</li></ol><p>单次请求过程</p><ol><li>发送请求localhost/ save</li><li>web容器发现所有请求都经过springMVC，将请求交给SpringMVC处理</li><li>解析请求路径/save</li><li>由/save匹配执行对应的方法save( )</li><li>执行save()</li><li>检测到有@ResponseBody直接将save()方法的返回值作为响应求体返回给请求方</li></ol><h3 id="简化配置类" tabindex="-1"><a class="header-anchor" href="#简化配置类"><span>简化配置类</span></a></h3><p>Spring提供了一个<code>AbstractDispatcherServletInitializer</code>的子类： <code>AbstractAnnotationConfigDispatcherServletInitializer</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> servletInConfig <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//Spring配置路径</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>springConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//SpringMVC配置路径</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>springMvcConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//拦截路径</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="请求与响应" tabindex="-1"><a class="header-anchor" href="#请求与响应"><span>请求与响应</span></a></h2><h3 id="解决路径冲突" tabindex="-1"><a class="header-anchor" href="#解决路径冲突"><span>解决路径冲突</span></a></h3><p>在团队多人开发，如何解决请求路径冲突</p><p>设置模块名作为请求路径的前缀 两种方法：</p><ol><li>修改每个方法的路径<code>@RuquestMapping</code>如： <code>&quot;/user/save&quot;</code><code>&quot;/book/save&quot;</code></li><li>修改类的请求路径 &quot;/user&quot; &quot;/save&quot; &quot;/book&quot; &quot;/save&quot;</li></ol><table><thead><tr><th style="text-align:center;">注解</th><th style="text-align:center;">类型</th><th style="text-align:center;">位置</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">@RequestMapping（value）</td><td style="text-align:center;">方法注解 类注解</td><td style="text-align:center;">SpringMVC控制器类中方法上</td><td style="text-align:center;">设置当前控制器方法请求访问路径，如果设置在类上统一设置当前控制器方法请求访问路径前缀</td></tr></tbody></table><p>示例：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> userControler <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token annotation punctuation">@ResponseBody</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;{&#39;info&#39;:&#39;springmvc&#39;}&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>value（默认）：请求访问你路径，或访问路径前缀</li></ul><h3 id="解决中文乱码" tabindex="-1"><a class="header-anchor" href="#解决中文乱码"><span>解决中文乱码</span></a></h3><p>关于发送的中文乱码，可以在“servlet容器启动的配置类” <code>servletInConfig</code>中覆盖父类的方法： 为web容器添加过滤器并指定字符集，Spring-web包中提供了专用字符过滤器</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//乱码处理</span></span>
<span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//获取字符过滤器</span></span>
<span class="line">    <span class="token class-name">CharacterEncodingFilter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//设定字符集</span></span>
<span class="line">    filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>filter<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求参数与形参不同" tabindex="-1"><a class="header-anchor" href="#请求参数与形参不同"><span>请求参数与形参不同</span></a></h3><p>例如，定义的方法中形参名为<code>username</code>和<code>age</code>，但是实际传参为<code>name</code>,<code>age</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> userControler <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token annotation punctuation">@ResponseBody</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;{&#39;info&#39;:&#39;springmvc&#39;}&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试之后就会发现</p><blockquote><p>username为null</p></blockquote><p>此时我们可以使用一个注解，用来声明参数名：<code> @RequestParam(&quot;name&quot;)</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> userControler <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token annotation punctuation">@ResponseBody</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span></span>
<span class="line">                       <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;{&#39;info&#39;:&#39;springmvc&#39;}&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="传递参数为实体类" tabindex="-1"><a class="header-anchor" href="#传递参数为实体类"><span>传递参数为实体类</span></a></h3><p>如果我们需要的参数过多，比如在新增用户时需要大量的数据，这样我们一般会制作一个实体类，来进行接收。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> userControler <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token annotation punctuation">@ResponseBody</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;{&#39;info&#39;:&#39;springmvc&#39;}&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//等其他属性</span></span>
<span class="line">    <span class="token comment">//重写getter,setter,toString方法</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样请求时，如果请求的属性名与实体类中的属性名完全一致，则会自动放入user中。</p><h3 id="传递json数据" tabindex="-1"><a class="header-anchor" href="#传递json数据"><span>传递JSON数据</span></a></h3><p>传递JSON数据的时候，我们的数据并不是在请求头的参数中，而是在请求体中。</p><p>所以我们在接收的时候也要添加注解，来声明这是请求体中的数据</p><p>下面就来实际写一下：</p><p>首先应该导入JSON数据转化相关坐标</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后告诉SpringMVC开启JSON转化数据</p><p>只需要再<code>SpringMvcConfig</code>中加入<code>@EnableWebMvc</code>注释，开启JSON转化数据</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span> </span>
<span class="line"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.protectark.mysqlt&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebMvc</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMvcConfig</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于JSON请求再请求体当中所以，再<code>Controller</code>方法中 对于形参的修饰不能使用<code>@RequestParam</code> 要使用<code>@RequestBody</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/inputuser&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@ResponseBody</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;input user ==&gt;&quot;</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;{&#39;info&#39;:&#39;springMVC&#39;}&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此完成。</p><table><thead><tr><th style="text-align:center;">注解</th><th style="text-align:center;">类型</th><th style="text-align:center;">位置</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;"><code>@EnableWebMvc</code></td><td style="text-align:center;">配置类注解</td><td style="text-align:center;">SpringMVC配置类定义上方</td><td style="text-align:center;">开启SpringMVC多项辅助功能</td></tr><tr><td style="text-align:center;"><code>@RequestBody</code></td><td style="text-align:center;">形参注解</td><td style="text-align:center;">Controller方法形参前</td><td style="text-align:center;">将请求中请求体所包含的数据传递给请求参数，此注解一个处理器方法只能使用一次</td></tr></tbody></table><h3 id="requestbody与requestparam对比" tabindex="-1"><a class="header-anchor" href="#requestbody与requestparam对比"><span><code>RequestBody</code>与<code>RequestParam</code>对比</span></a></h3><ul><li><p>区别</p><ul><li>@RequestParam用于接收ur1地址传参，表单传参【application/x-www-form-urlencoded)</li><li>@RequestBody用于接收json数据【application/json】</li></ul></li><li><p>应用</p><ul><li><p>后期开发中，发送json格式数据为主，@RequestBody应用较广</p></li><li><p>如果发送非json格式数据，选用@RequestParam接收请求参数</p></li></ul></li></ul><p>后面还有一个<code>@PathVariable</code> 属于形参注解，绑定路径参数与形参的关系</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/users/{id}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@ResponseBody</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;input id ==&gt;&quot;</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;{&#39;info&#39;:&#39;springMVC&#39;}&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="日期类型参数传递" tabindex="-1"><a class="header-anchor" href="#日期类型参数传递"><span>日期类型参数传递</span></a></h3><p>SpringMVC可以直接接收String类型的参数，并自动转为日期类型，如果需要指定格式可以使用注解</p><p><code>@DateTimeFormat</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/inputuser&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@ResponseBody</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern<span class="token operator">=</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Date</span> date<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;input date ==&gt;&quot;</span><span class="token operator">+</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;{&#39;info&#39;:&#39;springMVC&#39;}&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">注解</th><th style="text-align:center;">类型</th><th style="text-align:center;">位置</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;"><code>@DateTimeFormat</code></td><td style="text-align:center;">形参注解</td><td style="text-align:center;">SpringMVC控制器方法形参前</td><td style="text-align:center;">设定日期时间型数据格式</td></tr></tbody></table><blockquote><p>属性:pattern:日期时间格式字符串</p></blockquote><h3 id="响应" tabindex="-1"><a class="header-anchor" href="#响应"><span>响应</span></a></h3><p>如果要响应json数据，则只需要返回实体类即可</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/select&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@ResponseBody</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> user<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringMVC会自动将实体类转化为json数据</p><table><thead><tr><th style="text-align:center;">注解</th><th style="text-align:center;">类型</th><th style="text-align:center;">位置</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;"><code>@ResponseBody</code></td><td style="text-align:center;">方法注解</td><td style="text-align:center;">SpringMVC控制器方法上</td><td style="text-align:center;">设置当前控制器方法响应内容为当前返回值，无需解析</td></tr></tbody></table><h2 id="rest-风格" tabindex="-1"><a class="header-anchor" href="#rest-风格"><span>REST 风格</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><p>REST(Representational state Transfer)，表现形式状态转换</p><ul><li>传统风格资源描述形式 <ul><li>http://localhost/user/getById?id=1</li><li>http://localhost/user/saveUser</li></ul></li><li>REST风格描述形式 <ul><li>http://localhost/user/1</li><li>http://localhost/user</li></ul></li></ul><p>优点：书写简化，隐藏资源访问方式，无法通过地址得知对资源是哪种请求方式。</p><p>按照REST风格访问资源时使用行为动作区分对资源进行了何种操作</p><ul><li>http://localhost/users 查询全部用户信息 GET(查询)</li><li>http://localhost/users/1 查询指定用户信息 GET(查询)</li><li>http://localhost/users 添加用户信息 POST(新增/保存)</li><li>http://localhost/users 修改用户信息 PUT(修改/更新)</li><li>http://localhost/users/1 删除用户信息 DELETE(删除)</li></ul><p>这种方式属于约定方式，称为REST风格。根据这种风格对资源访问的方式称为RESTful</p><p>描述模块的名称通常使用复数，也就是加s的格式描述，表示此类资源，而非单个资源，例如:users、books、accounts...</p><h3 id="restful-快速开发" tabindex="-1"><a class="header-anchor" href="#restful-快速开发"><span>RESTful 快速开发</span></a></h3><p>由于REST风格都使用JSON进行通信，所以每一个方法都需要带有<code>@ResponseBody</code>，所以我们可以将这个注解放到控制器类上，又因为我们所有的控制器类都有<code>@Controller</code>和@<code>ResponseBody</code>注解，所以SpringMVC就将这两个合二为一：<code>@RestController</code></p><p>又因为我们使用的请求方式，绝大多数就四种，所以<code>@RequestMapping</code>注解也可以根据请求方式衍生出</p><ul><li>@PostMapping</li><li>@GetMapping</li><li>@PutMapping</li><li>@DeleteMapping</li></ul><p>使用这种方式，我们的Controller就由</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> userControler <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/users/save&quot;</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod<span class="token punctuation">.</span>Get</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token annotation punctuation">@ResponseBody</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Requestbody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;{&#39;info&#39;:&#39;springmvc&#39;}&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/users/delete&quot;</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod<span class="token punctuation">.</span>Delete</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token annotation punctuation">@ResponseBody</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Requestbody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;{&#39;info&#39;:&#39;springmvc&#39;}&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变为了</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> userControler <span class="token punctuation">{</span></span>
<span class="line">	<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Requestbody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span> </span>
<span class="line">         <span class="token keyword">return</span> <span class="token string">&quot;{&#39;info&#39;:&#39;springmvc&#39;}&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Requestbody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;{&#39;info&#39;:&#39;springmvc&#39;}&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="统一结果类" tabindex="-1"><a class="header-anchor" href="#统一结果类"><span>统一结果类</span></a></h2><p>设置统一结果类有以下好处：</p><p><strong>一、提高可维护性</strong></p><ul><li>集中管理返回结果，方便统一修改和扩展。</li><li>清晰定义错误处理逻辑，便于维护和调试。</li></ul><p><strong>二、增强稳定性和可靠性</strong></p><ul><li>规范异常信息，避免前端解析错误。</li><li>实现全局异常处理，防止系统崩溃。</li></ul><p><strong>三、提升团队协作效率</strong></p><ul><li>为前后端提供明确规范，减少沟通成本。</li><li>可复用性高，减少代码冗余。</li></ul><p><strong>四、便于监控和统计</strong></p><ul><li>统一日志记录格式，方便分析和监控。</li><li>利于数据统计分析，发现问题和瓶颈。</li></ul><p>一般我们的统一结果类由三部分组成，分别是<code>code</code>、<code>message</code>、<code>data</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 后端统一返回结果</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Data</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span> <span class="token comment">//编码：1成功，0和其它数字为失败</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span> <span class="token comment">//错误信息</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span> <span class="token comment">//数据</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        result<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">T</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        result<span class="token punctuation">.</span>data <span class="token operator">=</span> object<span class="token punctuation">;</span></span>
<span class="line">        result<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        result<span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span></span>
<span class="line">        result<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 <code>code</code> 我们一般将提前定义好的状态码写道一个类中，该类用于存放所有用到的状态码常量。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> <span class="token constant">SAVE_OK</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/* 等等 */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常处理器" tabindex="-1"><a class="header-anchor" href="#异常处理器"><span>异常处理器</span></a></h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h3><p>开发中不可避免会出现异常现象。</p><p>出现异常现象的常见位置与常见诱因如下:</p><ul><li>框架内部抛出的异常:因使用不合规导致</li><li>数据层抛出的异常:因外部服务器故障导致(例如:服务器访问超时)</li><li>业务层抛出的异常:因业务逻辑书写错误导致(例如:遍历业务书写操作，导致索引异常等)</li><li>表现层抛出的异常:因数据收集、校验等规则导致(例如:不匹配的数据类型间导致异常)</li><li>工具类抛出的异常:因工具类书写不严谨不够健壮导致(例如:必要释放的连接长期未释放等)</li></ul><p>我们可以发现，所有的层级都会抛出异常，所以我们采取的做法是，全部上抛，统一处理。 所有异常均抛到表现层进行处理</p><p>Spring提供的异常处理器：</p><ul><li>集中统一处理项目中出现的异常</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//处理REST风格的Controller</span></span>
<span class="line"><span class="token annotation punctuation">@RestControllerAdvice</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProjectExceptionAdvice</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 拦截异常的种类</span></span>
<span class="line">    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">doException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ol><li><p>由于我们拦截器属于<code>SpringMVC</code>技术，对<code>SpringMVC</code>进行加强，所以要吧拦截器放到能被<code>SpringMvcConfig</code>识别到的路径下，一般放到 <code>controller</code> 包下</p></li><li><p>前面我们也说了，要返回统一结果类，所以我们要修改异常处理器，使其返回结果类。</p></li></ol><h3 id="项目中异常处理" tabindex="-1"><a class="header-anchor" href="#项目中异常处理"><span>项目中异常处理</span></a></h3><p>项目异常分类</p><ul><li>业务异常(BusinessException) <ul><li>规范的用户行为产生的异常</li><li>不规范的用户行为操作产生的异常</li></ul></li><li>系统异常(SystemException) <ul><li>项目运行过程中可预计且无法避免的异常</li></ul></li><li>其他异常(Exception) <ul><li>编程人员未预期到的异常</li></ul></li></ul><p>项目异常处理方案</p><ul><li>业务异常(BusinessException) <ul><li>发送对应消息传递给用户，提醒规范操作</li></ul></li><li>系统异常(SystemException) <ul><li>发送固定消息传递给用户，安抚用户</li><li>发送特定消息给运维人员，提醒维护</li><li>记录日志</li></ul></li><li>其他异常(Exception) <ul><li>发送固定消息传递给用户，安抚用户</li><li>发送特定消息给编程人员，提醒维护(纳入预期范围内)</li><li>记录日志</li></ul></li></ul><h3 id="定义异常" tabindex="-1"><a class="header-anchor" href="#定义异常"><span>定义异常</span></a></h3><p>依据上面的分类，可以定义出两种异常，系统异常与业务异常</p><p>我们创建新的包<code>exception</code>，用于存放自定义异常</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 自定义系统异常</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//给异常编号</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* 此处省略getter&amp;setter */</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//重写所有的构造方法</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">SystemException</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">SystemException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">SystemException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">,</span> <span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">SystemException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">,</span> <span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">SystemException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">,</span> <span class="token keyword">boolean</span> enableSuppression<span class="token punctuation">,</span> <span class="token keyword">boolean</span> writableStackTrace<span class="token punctuation">,</span> <span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> cause<span class="token punctuation">,</span> enableSuppression<span class="token punctuation">,</span> writableStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同理创造出<code>BusinessException</code></p><h3 id="抛出自定义异常" tabindex="-1"><a class="header-anchor" href="#抛出自定义异常"><span>抛出自定义异常</span></a></h3><p>到业务层中可能出现异常的位置，将代码包装，转化为抛出异常</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//此处code值我们定义到Code常量中。</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SystemException</span><span class="token punctuation">(</span><span class="token class-name">Code</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_NULL</span><span class="token punctuation">,</span><span class="token string">&quot;结果为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> user<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理自定义异常" tabindex="-1"><a class="header-anchor" href="#处理自定义异常"><span>处理自定义异常</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RestControllerAdvice</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProjectExceptionAdvice</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">SystemException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">doSystemException</span><span class="token punctuation">(</span><span class="token class-name">SystemException</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/* 记录日志 */</span></span>
<span class="line">        <span class="token comment">/* 发送消息给运维 */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>getCode<span class="token punctuation">,</span>ex<span class="token punctuation">.</span>getMessage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">doException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拦截器" tabindex="-1"><a class="header-anchor" href="#拦截器"><span>拦截器</span></a></h2><p>拦截器(Interceptor)是一种动态拦截方法调用的机制，在SpringMVc中动态拦截控制器方法的执行 作用：</p><ul><li>在指定的方法调用前后执行预先设定的代码</li><li>阻止原始方法的执行 拦截器的作用主要包括：</li><li>权限与访问控制：验证用户身份及权限，限制对特定资源的访问，保障系统安全。</li><li>日志与性能监控：记录请求信息，分析性能瓶颈，为优化提供数据支持。</li><li>数据处理：对请求数据预处理和响应数据后处理，确保数据规范、安全。</li><li>防止重复提交与验证：防止表单重复提交，验证表单数据合法性。</li><li>系统集成：控制系统间交互，执行统一业务逻辑，提高复用性和可维护性。</li></ul><h3 id="与过滤器区别" tabindex="-1"><a class="header-anchor" href="#与过滤器区别"><span>与过滤器区别</span></a></h3><ul><li>归属不同:Filter属于Servlet技术，Interceptor属于SpringMVC技术</li><li>拦截内容不同:Filter对所有访问进行增强，Interceptor仅针对SpringMVc的访问进行增强</li><li>设计目的不同：拦截器侧重于业务逻辑前后处理，与业务关联性强；过滤器主要对请求和响应进行一般性过滤和处理。</li><li>执行顺序：拦截器按在 Spring MVC 中的注册或注解顺序执行特定方法；过滤器由 Web 容器的部署描述符或注解指定顺序执行doFilter方法。</li></ul><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>首先创建一个新的包interceptor，这个包可以放到controller包下，因为拦截器就是对表现层做增强的。</p><p>创建拦截器类，并实现 <code>HandlerInterceptor</code> 接口</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 该拦截器要作为bean被SpringMVC配置类识别</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Interceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* 控制器执行前 */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 此处true为全部放行</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* 控制器执行后 */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> modelAndView<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* Post执行之后 */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterCompletion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建SpringMVC配置类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Interceptor</span> interceptor<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* /user 拦截路径 */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置多个拦截器" tabindex="-1"><a class="header-anchor" href="#配置多个拦截器"><span>配置多个拦截器</span></a></h3><p>根据 <code>Interceptor</code> 创建一个 <code>Interceptor2</code> 的拦截器 修改 <code>SpringMvcConfig</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Interceptor</span> interceptor<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Interceptor2</span> interceptor2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/* /user 拦截路径 */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,147)]))}const o=s(t,[["render",l],["__file","SpringMVC.html.vue"]]),u=JSON.parse('{"path":"/JavaEE/SpringMVC.html","title":"SpringMVC","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[{"level":3,"title":"第一步：导坐标","slug":"第一步-导坐标","link":"#第一步-导坐标","children":[]},{"level":3,"title":"第二步：创建SpringMVC控制器类","slug":"第二步-创建springmvc控制器类","link":"#第二步-创建springmvc控制器类","children":[]},{"level":3,"title":"第三步：创建SpringMVC的配置类","slug":"第三步-创建springmvc的配置类","link":"#第三步-创建springmvc的配置类","children":[]},{"level":3,"title":"第四步：定义一个servlet容器启动的配置类，在里面加载spring的配置","slug":"第四步-定义一个servlet容器启动的配置类-在里面加载spring的配置","link":"#第四步-定义一个servlet容器启动的配置类-在里面加载spring的配置","children":[]},{"level":3,"title":"注解说明","slug":"注解说明","link":"#注解说明","children":[]},{"level":3,"title":"工作流程说明","slug":"工作流程说明","link":"#工作流程说明","children":[]},{"level":3,"title":"简化配置类","slug":"简化配置类","link":"#简化配置类","children":[]}]},{"level":2,"title":"请求与响应","slug":"请求与响应","link":"#请求与响应","children":[{"level":3,"title":"解决路径冲突","slug":"解决路径冲突","link":"#解决路径冲突","children":[]},{"level":3,"title":"解决中文乱码","slug":"解决中文乱码","link":"#解决中文乱码","children":[]},{"level":3,"title":"请求参数与形参不同","slug":"请求参数与形参不同","link":"#请求参数与形参不同","children":[]},{"level":3,"title":"传递参数为实体类","slug":"传递参数为实体类","link":"#传递参数为实体类","children":[]},{"level":3,"title":"传递JSON数据","slug":"传递json数据","link":"#传递json数据","children":[]},{"level":3,"title":"RequestBody与RequestParam对比","slug":"requestbody与requestparam对比","link":"#requestbody与requestparam对比","children":[]},{"level":3,"title":"日期类型参数传递","slug":"日期类型参数传递","link":"#日期类型参数传递","children":[]},{"level":3,"title":"响应","slug":"响应","link":"#响应","children":[]}]},{"level":2,"title":"REST 风格","slug":"rest-风格","link":"#rest-风格","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"RESTful 快速开发","slug":"restful-快速开发","link":"#restful-快速开发","children":[]}]},{"level":2,"title":"统一结果类","slug":"统一结果类","link":"#统一结果类","children":[]},{"level":2,"title":"异常处理器","slug":"异常处理器","link":"#异常处理器","children":[{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"项目中异常处理","slug":"项目中异常处理","link":"#项目中异常处理","children":[]},{"level":3,"title":"定义异常","slug":"定义异常","link":"#定义异常","children":[]},{"level":3,"title":"抛出自定义异常","slug":"抛出自定义异常","link":"#抛出自定义异常","children":[]},{"level":3,"title":"处理自定义异常","slug":"处理自定义异常","link":"#处理自定义异常","children":[]}]},{"level":2,"title":"拦截器","slug":"拦截器","link":"#拦截器","children":[{"level":3,"title":"与过滤器区别","slug":"与过滤器区别","link":"#与过滤器区别","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"配置多个拦截器","slug":"配置多个拦截器","link":"#配置多个拦截器","children":[]}]}],"git":{},"filePathRelative":"JavaEE/SpringMVC.md"}');export{o as comp,u as data};

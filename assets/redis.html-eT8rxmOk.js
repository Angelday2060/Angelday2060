import{_ as s,c as a,d as t,o as e}from"./app-BuZoRmWt.js";const p="/assets/RedisDataType-Bh9-E0sM.png",l={};function c(i,n){return e(),a("div",null,n[0]||(n[0]=[t('<h1 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>Redis</span></a></h1><h2 id="redis概念" tabindex="-1"><a class="header-anchor" href="#redis概念"><span>Redis概念</span></a></h2><p>Redis是一个基于内存中的key-value数据结构存储系统，常用作：数据库、缓存、消息中间件。 被称为结构化的Nosql数据库，非关系型数据库。</p><blockquote><p>常见的关系型数据库（RDBMS）：Mysql Oracle DB2 SQLServer</p></blockquote><blockquote><p>非关系型数据库（NoSql）：<code>Redis</code>、Mongo db、MemCached</p></blockquote><p>应用场景： 缓存、任务队列、消息队列、分布式锁</p><p>特点： 基于内存存储，读写性能高 适合存储热点数据（热点商品、资讯、新闻） 企业应用广泛</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><p>Redis存储的是<code>key-value</code>结构的数据，其中<code>key</code>是<code>字符串</code>类型,<code>数据</code>保存在<code>value</code>中，因此Redis的数据类型实际上是指value的数据类型</p><table><thead><tr><th style="text-align:center;">数据类型</th><th style="text-align:center;">描述</th><th style="text-align:center;">特点</th></tr></thead><tbody><tr><td style="text-align:center;">String</td><td style="text-align:center;">普通字符串(常用)</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">hash</td><td style="text-align:center;">哈希表</td><td style="text-align:center;">是一个String类型的field和value的映射表，适合存储对象</td></tr><tr><td style="text-align:center;">list</td><td style="text-align:center;">列表</td><td style="text-align:center;">简单的字符串列表，按照插入顺序排序,可以有重复元素</td></tr><tr><td style="text-align:center;">set</td><td style="text-align:center;">无序集合</td><td style="text-align:center;">String类型的无序集合，集合成员唯一，不能重复</td></tr><tr><td style="text-align:center;">sorted set / zset</td><td style="text-align:center;">有序集合，没有重复元素</td><td style="text-align:center;">与Set相似，但每个元素都会关联一个double类型的分数</td></tr></tbody></table><p>下面是存储结构示意图： <img src="'+p+`" alt="Redis数据结构"></p><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h2><ol><li>String操作命令</li></ol><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">SET key value</td><td style="text-align:center;">设置指定key的值</td></tr><tr><td style="text-align:center;">GET key</td><td style="text-align:center;">获取指定key的值</td></tr><tr><td style="text-align:center;">SETEX key seconds value</td><td style="text-align:center;">设置key的值，并且key的过期时间设为seconds秒</td></tr><tr><td style="text-align:center;">SETNX key value</td><td style="text-align:center;">只有在key不存在时设置key的值，如果存在不进行任何操作</td></tr></tbody></table><ol start="2"><li>hash操作命令</li></ol><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">HSET key field value</td><td style="text-align:center;">将key中的字段field的值设为value</td></tr><tr><td style="text-align:center;">HGET key field</td><td style="text-align:center;">获取存储在哈希表中指定字段的值</td></tr><tr><td style="text-align:center;">HDEL key field</td><td style="text-align:center;">删除存储在哈希表中的指定字段</td></tr><tr><td style="text-align:center;">HKEYS key</td><td style="text-align:center;">获取哈希表中所有字段</td></tr><tr><td style="text-align:center;">HVALS key</td><td style="text-align:center;">获取哈希表中所有值</td></tr><tr><td style="text-align:center;">HGETALL key</td><td style="text-align:center;">获取在哈希表中指定key的所有字段和值</td></tr></tbody></table><ol start="3"><li>List列表操作命令</li></ol><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">LPUSH key value1 [value2]</td><td style="text-align:center;">将一个或多个值插入到列表头部</td></tr><tr><td style="text-align:center;">LRANGE key start stop</td><td style="text-align:center;">获取列表指定范围内的元素</td></tr><tr><td style="text-align:center;">RPOP key</td><td style="text-align:center;">移除并获取列表最后一个元素</td></tr><tr><td style="text-align:center;">LLEN key</td><td style="text-align:center;">获取列表长度</td></tr><tr><td style="text-align:center;">BRPOP key1 [key2] timeout</td><td style="text-align:center;"></td></tr></tbody></table><ol start="4"><li>set集合操作命令</li></ol><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">SADD key member1 [member2]</td><td style="text-align:center;">向集合添加一个或多个成员</td></tr><tr><td style="text-align:center;">SMEMBERS key</td><td style="text-align:center;">返回集合中所有成员</td></tr><tr><td style="text-align:center;">SCARD key</td><td style="text-align:center;">获取集合的成员数</td></tr><tr><td style="text-align:center;">SINTER key1 [key2]</td><td style="text-align:center;">返回给定所有集合的交集</td></tr><tr><td style="text-align:center;">SUNION key1 [key2]</td><td style="text-align:center;">返回所有给定集合的并集</td></tr><tr><td style="text-align:center;">SDIFF key1 [key2]</td><td style="text-align:center;">返回给定所有集合的差集</td></tr><tr><td style="text-align:center;">SREM key member1 [member2]</td><td style="text-align:center;">移除集合中一个或多个成员</td></tr></tbody></table><ol start="5"><li>Zset有序集合操作命令</li></ol><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">ZADD key score1 member1 [score2 member2]</td><td style="text-align:center;">向有序集合添加一个或多个成员</td></tr><tr><td style="text-align:center;">ZRANGE key start stop [WITHSCORES]</td><td style="text-align:center;">通过索引区间返回有序集合中指定区间内的程序员</td></tr><tr><td style="text-align:center;">ZINCRBY key increament member</td><td style="text-align:center;">有序集合中对指定成员的分数加上增量increament</td></tr><tr><td style="text-align:center;">ZREM key member [member]</td><td style="text-align:center;">移除有序集合中的一个或多个成员</td></tr></tbody></table><ol start="6"><li>通用命令</li></ol><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">KEYS pattern</td><td style="text-align:center;">查找所有符合给定模式(pattern)的key</td></tr><tr><td style="text-align:center;">EXISTS key</td><td style="text-align:center;">检查给定key是否存在</td></tr><tr><td style="text-align:center;">TYPE key</td><td style="text-align:center;">返回key所存储的值的类型</td></tr><tr><td style="text-align:center;">TTL key</td><td style="text-align:center;">返回给定key的剩余生存时间(TTL,time to live)，以秒为单位</td></tr><tr><td style="text-align:center;">DEL key</td><td style="text-align:center;">key存在时删除key</td></tr></tbody></table><h2 id="java操作redis" tabindex="-1"><a class="header-anchor" href="#java操作redis"><span>Java操作Redis</span></a></h2><p>现在项目大多数都是基于<code>Spring Boot</code>开发的，Spring 整合了 Redis 的操作方式，提供了<code>Spring Data Redis</code>用来简化 Redis 操作。</p><h3 id="第一步-导坐标、" tabindex="-1"><a class="header-anchor" href="#第一步-导坐标、"><span>第一步：导坐标、</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupld</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupld</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactld</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactld</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二步-在yml中配置redis" tabindex="-1"><a class="header-anchor" href="#第二步-在yml中配置redis"><span>第二步：在yml中配置Redis</span></a></h3><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">redis</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token key atrule">host</span><span class="token punctuation">:</span> localhost</span>
<span class="line">	<span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span></span>
<span class="line">	<span class="token comment">#选择要操作的几号数据库(默认有15个数据库)</span></span>
<span class="line">	<span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span></span>
<span class="line">	<span class="token key atrule">jedis</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token comment">#Redis连接池配置</span></span>
<span class="line">		<span class="token key atrule">oppl</span><span class="token punctuation">:</span></span>
<span class="line">			<span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span> <span class="token comment">#设置最大连接数</span></span>
<span class="line">			<span class="token key atrule">max-wait</span><span class="token punctuation">:</span> 1ms <span class="token comment">#连接池最大阻塞等待时间</span></span>
<span class="line">			<span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">4</span> <span class="token comment">#连接池中的最大空闲连接</span></span>
<span class="line">			<span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment">#连接池中的最小空闲连接</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里配置了 Redis 的连接信息，包括主机地址、端口号以及要操作的数据库编号。同时，还配置了 Jedis 连接池的参数，以提高连接的复用性和性能。最大连接数、最大阻塞等待时间、最大空闲连接和最小空闲连接的设置可以根据实际应用的需求进行调整。</p><h3 id="第三步-通过redistemplate对象操作redis" tabindex="-1"><a class="header-anchor" href="#第三步-通过redistemplate对象操作redis"><span>第三步：通过<code>RedisTemplate</code>对象操作Redis</span></a></h3><p>Spring Data Redis中提供了一个高度封装的类: <code>RedisTemplate</code>，针对<code>jedis</code>客户端中大量<code>api</code>进行了<code>归类封装</code>,将同一类型操作封装为<code>operation</code>接口，具体分类如下:</p><table><thead><tr><th style="text-align:center;">分类</th><th style="text-align:center;">说明</th><th style="text-align:center;">获取方法</th></tr></thead><tbody><tr><td style="text-align:center;">ValueOperations</td><td style="text-align:center;">简单的K-V操作</td><td style="text-align:center;">opsForValue()</td></tr><tr><td style="text-align:center;">SetOperations</td><td style="text-align:center;">set类型数据操作</td><td style="text-align:center;">opsForSet()</td></tr><tr><td style="text-align:center;">ZSetOperations</td><td style="text-align:center;">zset类型数据操作</td><td style="text-align:center;">opsForZSet()</td></tr><tr><td style="text-align:center;">HashOperations</td><td style="text-align:center;">针对map类型的数据操作</td><td style="text-align:center;">opsForHash()</td></tr><tr><td style="text-align:center;">ListOperations</td><td style="text-align:center;">针对List类型的数据操作</td><td style="text-align:center;">opsForList()</td></tr></tbody></table><p>我们在Test测试类中注入<code>RedisTemplate</code>对象，并通过这个对象来操作Redis 例如：添加字符串类型 <code>key</code>为<code>name</code>，<code>value</code>为<code>zhangsan</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SptingRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token annotation punctuation">@Autowired</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Test</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">//添加字符串name为张三</span></span>
<span class="line">		redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义序列化方式" tabindex="-1"><a class="header-anchor" href="#自定义序列化方式"><span>自定义序列化方式</span></a></h3><p>由于<code>RedisTemplate</code>会默认将<code>key</code>序列化存储，如果要修改序列化方式，则需要创建一个配置类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">{</span></span>
<span class="line">	</span>
<span class="line">	<span class="token annotation punctuation">@Bean</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	</span>
<span class="line">	<span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment">//默认的Key序列化器为JdkSerializationRedisserializer</span></span>
<span class="line">	redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	redisTemplate<span class="token punctuation">.</span><span class="token function">setHashkeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这个配置类，我们可以将<code>RedisTemplate</code>的<code>key</code>序列化方式修改为<code>StringRedisSerializer</code>，这样可以更方便地处理字符串类型的<code>key</code>。同时，也可以根据需要修改<code>value</code>的序列化方式，以满足不同的数据存储需求。</p><h3 id="其他操作示例" tabindex="-1"><a class="header-anchor" href="#其他操作示例"><span>其他操作示例</span></a></h3><p>除了添加字符串类型的数据，我们还可以使用<code>RedisTemplate</code>进行其他类型的数据操作。</p><p><strong>添加 Set 类型数据</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;mySet&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>添加 ZSet 类型数据</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;myZSet&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;member1&quot;</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;myZSet&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;member2&quot;</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>添加 Hash 类型数据</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;myHash&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;field1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;myHash&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;field2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>添加 List 类型数据</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">&quot;myList&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;element1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span><span class="token string">&quot;myList&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;element2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据读取操作" tabindex="-1"><a class="header-anchor" href="#数据读取操作"><span>数据读取操作</span></a></h3><p>我们也可以使用<code>RedisTemplate</code>读取存储在 Redis 中的数据。</p><p><strong>读取字符串类型数据</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Object</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Value for key &#39;name&#39;: &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>读取 Set 类型数据</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> setValues <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span><span class="token string">&quot;mySet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Values in set &#39;mySet&#39;: &quot;</span> <span class="token operator">+</span> setValues<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>读取 ZSet 类型数据</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> zSetValues <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token string">&quot;myZSet&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Values in zset &#39;myZSet&#39;: &quot;</span> <span class="token operator">+</span> zSetValues<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>读取 Hash 类型数据</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Object</span> hashValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;myHash&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;field1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Value for field &#39;field1&#39; in hash &#39;myHash&#39;: &quot;</span> <span class="token operator">+</span> hashValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>读取 List 类型数据</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> listValues <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token string">&quot;myList&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Values in list &#39;myList&#39;: &quot;</span> <span class="token operator">+</span> listValues<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这些操作示例，我们可以看到<code>RedisTemplate</code>提供了丰富的方法来操作不同类型的数据，使得在 Java 应用中使用 Redis 变得更加方便和高效。同时，根据实际需求，我们还可以进一步扩展和定制<code>RedisTemplate</code>的功能，以满足复杂的业务场景。</p>`,63)]))}const u=s(l,[["render",c],["__file","redis.html.vue"]]),d=JSON.parse('{"path":"/database/redis.html","title":"Redis","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Redis概念","slug":"redis概念","link":"#redis概念","children":[]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":2,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]},{"level":2,"title":"Java操作Redis","slug":"java操作redis","link":"#java操作redis","children":[{"level":3,"title":"第一步：导坐标、","slug":"第一步-导坐标、","link":"#第一步-导坐标、","children":[]},{"level":3,"title":"第二步：在yml中配置Redis","slug":"第二步-在yml中配置redis","link":"#第二步-在yml中配置redis","children":[]},{"level":3,"title":"第三步：通过RedisTemplate对象操作Redis","slug":"第三步-通过redistemplate对象操作redis","link":"#第三步-通过redistemplate对象操作redis","children":[]},{"level":3,"title":"自定义序列化方式","slug":"自定义序列化方式","link":"#自定义序列化方式","children":[]},{"level":3,"title":"其他操作示例","slug":"其他操作示例","link":"#其他操作示例","children":[]},{"level":3,"title":"数据读取操作","slug":"数据读取操作","link":"#数据读取操作","children":[]}]}],"git":{},"filePathRelative":"database/redis.md"}');export{u as comp,d as data};

import{_ as s,c as a,d as e,o as t}from"./app-BuZoRmWt.js";const p="/assets/Exception-D5VHpYKz.png",l="/assets/CollectionType-pW_nIWj1.png",c="/assets/MapType-CnHM1pqu.png",i="/assets/HashMap-CRQVeNdK.png",o="/assets/ThreadLife-DQrzO2NU.png",u={};function r(d,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="javase" tabindex="-1"><a class="header-anchor" href="#javase"><span>JavaSE</span></a></h1><p>This article mainly focuses on the knowledge of JavaSE.</p><h2 id="引入" tabindex="-1"><a class="header-anchor" href="#引入"><span>引入</span></a></h2><p>首先了解一些基本的doc命令</p><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">意思</th></tr></thead><tbody><tr><td style="text-align:center;">dir</td><td style="text-align:center;">查看当前路径</td></tr><tr><td style="text-align:center;">cd</td><td style="text-align:center;">进入目录</td></tr><tr><td style="text-align:center;">cd..</td><td style="text-align:center;">退回上一级</td></tr><tr><td style="text-align:center;">cls</td><td style="text-align:center;">清屏</td></tr><tr><td style="text-align:center;">javac</td><td style="text-align:center;">编译Java文件</td></tr><tr><td style="text-align:center;">java</td><td style="text-align:center;">运行class文件</td></tr><tr><td style="text-align:center;">exit</td><td style="text-align:center;">退出DOS窗口</td></tr><tr><td style="text-align:center;">c:/d:</td><td style="text-align:center;">切换盘符</td></tr></tbody></table><h2 id="第一个java文件" tabindex="-1"><a class="header-anchor" href="#第一个java文件"><span>第一个Java文件</span></a></h2><p>在test.java中编写以下代码</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> test<span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入控制台分别输入以下内容</p><blockquote><p>javac test.java<br> java test</p></blockquote><p>看到有以下内容输出：</p><blockquote><p>Hello World!</p></blockquote><p>到此成功执行第一个Java文件<br> 前面是在文本编辑器中进行操作<br> 在以后我们都会使用IDEA进行代码的编写和运行</p><h2 id="java的加载与执行" tabindex="-1"><a class="header-anchor" href="#java的加载与执行"><span>Java的加载与执行</span></a></h2><p>Java程序的运行阶段包括两个非常重要的阶段</p><ul><li>编译阶段</li><li>运行阶段</li></ul><p>编译阶段检查Java源程序是否符合Java语法，符合的则会生成字节码文件class 字节码文件中不是纯粹的二进制，这种文件无法再操作系统中直接执行。 然后使用JDK中的javac命令进行编译</p><p><strong>public class 与 class 的区别</strong></p><ul><li>一个java源文件中可以有多个class</li><li>一个java源文件中public class不是必须的</li><li>一个class会生成一个字节码文件</li><li>如果存在public 类名应该与文件名相同</li><li>每一个class 中都可以编写main方法，都可以设定程序的入口</li></ul><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h3><p><strong>作用</strong></p><ol><li>不同的数据有不同的类型，不同的数据类型底层会分配不同大小的空间。</li><li>数据类型是指导程序JVM在运行阶段应该分配多大的内存空间。</li></ol><p><strong>分类</strong></p><ol><li>基本数据类型</li><li>引用数据类型</li></ol><p>关于基本数据类型，可分为四大类，八小钟</p><ol><li>整数型 byte short int long</li><li>浮点型 float double</li><li>布尔型 boolean</li><li>字符型 char</li></ol><h3 id="范围与大小" tabindex="-1"><a class="header-anchor" href="#范围与大小"><span>范围与大小</span></a></h3><table><thead><tr><th style="text-align:center;">关键字</th><th style="text-align:center;">类型描述</th><th style="text-align:center;">大小</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;">byte</td><td style="text-align:center;">字节型</td><td style="text-align:center;">1个字节</td><td style="text-align:center;">(-128~127)</td></tr><tr><td style="text-align:center;">short</td><td style="text-align:center;">短整型</td><td style="text-align:center;">2个字节</td><td style="text-align:center;">(-32768~32767)</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">整型</td><td style="text-align:center;">4个字节</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">long</td><td style="text-align:center;">长整型</td><td style="text-align:center;">8个字节</td><td style="text-align:center;">1L</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">单精度浮点型</td><td style="text-align:center;">4个字节</td><td style="text-align:center;">0.0f</td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;">双精度浮点型</td><td style="text-align:center;">8个字节</td><td style="text-align:center;">0.00d</td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:center;">布尔型</td><td style="text-align:center;">2个字节</td><td style="text-align:center;">true/false</td></tr><tr><td style="text-align:center;">char</td><td style="text-align:center;">字符型</td><td style="text-align:center;">1个字节</td><td style="text-align:center;">&#39;\\u0000&#39;</td></tr></tbody></table><blockquote><p>注：字节（byte） 1 byte = 8 bit 即 1 个字节 = 8 个比特位 1 个比特位表示 1 个 2 进制位 1 KB = 1024 Byte 1 MB = 1024 KB</p></blockquote><h3 id="转换规则" tabindex="-1"><a class="header-anchor" href="#转换规则"><span>转换规则</span></a></h3><ol><li>八种基本数据类型处布尔类型之外，剩下的其中数据类型都可以互相转换</li><li>小容量转化为大容量，成为自动类型转换，容量从小到大依次是： byte short(char) int long float double<br> 注：任何浮点型类型不管占用多少字节，都比整数型容量大 char和short可表示的种类数量相同，但是char可以取更大的正整数</li><li>大容量转化为小容量，叫强制类型转化，需要加强制转化符，程序才能编译通过， 但是运行阶段可能会损失精度。</li><li>字面值没有超过byte short char 取值范围，可以直接赋值给他们</li><li>byte short char混合运算，先转换成int类型再做运算</li><li>多种数据类型混合运算，先转换成容量最大的那种类型再做运算。</li></ol><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><h3 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符"><span>算数运算符</span></a></h3><table><thead><tr><th style="text-align:center;">符号</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">+、-、*、/、%</td><td style="text-align:center;">分别是：加、减、乘、除、取余</td></tr><tr><td style="text-align:center;">++</td><td style="text-align:center;">自加一</td></tr><tr><td style="text-align:center;">--</td><td style="text-align:center;">自减一</td></tr></tbody></table><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h3><p>这类运算符会比较两者的关系，返回true/false</p><table><thead><tr><th style="text-align:center;">符号</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">==</td><td style="text-align:center;">判断左右两个值是否相等</td></tr><tr><td style="text-align:center;">!=</td><td style="text-align:center;">判断左右两个值是否不相等</td></tr><tr><td style="text-align:center;">&gt; &lt; &gt;= &lt;=</td><td style="text-align:center;">分别是：大于、小于、大于等于、小于等于</td></tr><tr><td style="text-align:center;">+=</td><td style="text-align:center;">追加， i += 1 等同于 i = i + 1</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h3><table><thead><tr><th style="text-align:center;">符号</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">&amp;&amp;</td><td style="text-align:center;">逻辑与，两边都为true结果才为true</td></tr><tr><td style="text-align:center;">ll</td><td style="text-align:center;">逻辑或，两边有一个true结果就为true</td></tr><tr><td style="text-align:center;">!</td><td style="text-align:center;">逻辑非</td></tr></tbody></table><h3 id="条件运算符" tabindex="-1"><a class="header-anchor" href="#条件运算符"><span>条件运算符</span></a></h3><ul><li>三元运算符又称三目运算符</li><li>语法： 布尔表达式(x) ? 表达式(a) : 表达式(b)</li><li>x为true执行a，false则执行b</li></ul><h2 id="控制语句" tabindex="-1"><a class="header-anchor" href="#控制语句"><span>控制语句</span></a></h2><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h3><table><thead><tr><th style="text-align:center;">关键字</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">if-else</td><td style="text-align:center;">根据条件执行不同的代码块</td></tr><tr><td style="text-align:center;">switch</td><td style="text-align:center;">根据表达式执行不同的分支</td></tr><tr><td style="text-align:center;">for()</td><td style="text-align:center;">重复执行一段代码，可以指定循环初始值，次数</td></tr><tr><td style="text-align:center;">while</td><td style="text-align:center;">在满足条件下重复执行一段代码</td></tr><tr><td style="text-align:center;">do-while</td><td style="text-align:center;">先进行操作再进行判断的循环语句</td></tr><tr><td style="text-align:center;">break</td><td style="text-align:center;">用于终止switch的执行，并跳出当前代码块</td></tr><tr><td style="text-align:center;">continue</td><td style="text-align:center;">用于终止本次循环，并执行下次循环</td></tr><tr><td style="text-align:center;">return</td><td style="text-align:center;">退出当前方法，并返回至调用方法的地方</td></tr></tbody></table><h3 id="_1-if-else" tabindex="-1"><a class="header-anchor" href="#_1-if-else"><span>1.if - else</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;布尔表达式&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//代码块1</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//代码块2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果if中的布尔表达式返回值为true，执行代码块1，否则执行代码块2<br> 当有多个else时</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;布尔表达式1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//代码块1</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;布尔表达式2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//代码块2</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//代码块3</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据条件的顺序依次判断，如果都为false则执行代码块3</p><p>如果if 语句块中只有一行代码，那么括号可以省略不写（一般不使用这种方法）</p><h3 id="_2-switch语句" tabindex="-1"><a class="header-anchor" href="#_2-switch语句"><span>2. switch语句</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token keyword">int</span> 或 <span class="token class-name">String</span> 类型的字面值或变量<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> 值<span class="token number">1</span><span class="token operator">:</span></span>
<span class="line">        <span class="token comment">//当满足值1，执行此代码块</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> 值<span class="token number">2</span><span class="token operator">:</span></span>
<span class="line">        <span class="token comment">//当满足值2，执行此代码块</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">        <span class="token comment">//所有的case都不满足，执行此代码块</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//注意1：switch中表达式可以是整数类型或其包装型、枚举或字符串型(从Java7开始)</span></span>
<span class="line"><span class="token comment">//注意2：case语句块中如果没有break关键字，则程序会继续向下执行（不会再进行匹配），直到遇到break或switch执行完成</span></span>
<span class="line"><span class="token comment">//这种现象称之为case穿透现象</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-for循环" tabindex="-1"><a class="header-anchor" href="#_3-for循环"><span>3. for循环</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始条件<span class="token punctuation">;</span>循环条件<span class="token punctuation">;</span>循环控制变量的更新操作<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//循环体</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i --&gt; &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察上述函数，初始值我们给定了一个 i = 1<br> 循环体就会先输出变量i的值 --&gt; 1<br> 循环体执行完后会更新循环控制变量i的值 自加一 然后再用更新后的i来判断 i是否小于等于 5<br> 如果为true则继续执行循环体<br> 以此逻辑我们不难推出其输出结果</p><blockquote><p>i --&gt;1<br> i --&gt;2<br> i --&gt;3<br> i--&gt;4<br> i --&gt;5<br> i --&gt;6</p></blockquote><h3 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach"><span>foreach</span></a></h3><p>它提供了一种简化的语法用来快速遍历集合中元素的值</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>集合元素的数据类型 每次遍历表示当前元素的变量名 <span class="token operator">:</span> 要遍历的数组或集合<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//循环体</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> number <span class="token operator">:</span> numbers<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后输出结果为:</p><blockquote><p>12345</p></blockquote><h3 id="_4-while循环" tabindex="-1"><a class="header-anchor" href="#_4-while循环"><span>4. while循环</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//循环体</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>布尔表达式为true时就会执行循环体中的代码块，要注意避免死循环<br> do-while循环</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">do</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//循环体</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一种先执行再判断的循环方式</p><h3 id="_5-控制语句break-continue" tabindex="-1"><a class="header-anchor" href="#_5-控制语句break-continue"><span>5.控制语句break&amp;continue</span></a></h3><p><strong>break</strong></p><ol><li>break; 可作为完整语句</li><li>break 在 switch 语句中用来终止 switch 语句</li><li>break 在循环语句中（for,while,do while）用来终止循环</li></ol><p><strong>continue</strong></p><ol><li>continue; 可作为完整语句</li><li>表示直接进入下一次循环</li></ol><h3 id="_6-跳转语句" tabindex="-1"><a class="header-anchor" href="#_6-跳转语句"><span>6. 跳转语句</span></a></h3><p>通过标签(label)和break联合使用跳出多重循环</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//给外层for起名</span></span>
<span class="line">outerLoop<span class="token operator">:</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Outer loop: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//内层for命名</span></span>
<span class="line">    innerLoop<span class="token operator">:</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Inner loop: &quot;</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">break</span> outerLoop<span class="token punctuation">;</span>  <span class="token comment">// 在满足条件时跳出外层循环</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码若满足outerLoop的条件会直接结束所有的循环</p><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><h3 id="基本概念-1" tabindex="-1"><a class="header-anchor" href="#基本概念-1"><span>基本概念</span></a></h3><p>方法本质就是一段代码，用来完成特定功能，可以重复使用。</p><p>方法定义在类体中，方法体中不能再嵌套方法(如main方法中不能再定义其他的方法)</p><ol><li><p>方法的结构 [修饰符列表] 返回值类型 方法名 (形式参数列表) { 方法体;<br> } <strong>结构说明</strong> 返回值类型规定执行结果的数据类型，返回值可以是所有的Java类型， 如果方法没有返回值必须写为<code>void</code> 如果规定了返回值必须有return，否则JVM会报错 <strong>方法名</strong> 只要是合法的标识符即可 一般采用驼峰命名法即：首个单词首字母小写后面的都大写 详细请参考阿里巴巴开发手册 <strong>形参列表</strong> 形参是局部变量 形参可以是多个，之间用逗号隔开 在调用这个方法时，实际传递的参数被称为实参。 实参必须与形参的个数，类型，顺序都要相同 <strong>方法体</strong> 方法体必须由大括号括起来，自上而下依次进行</p></li><li><p>方法的调用</p><ol><li>调用带有static的方法<br> 用<code>类名.方法名(实参)</code>的方式调用<br> 2.调用没有static的方法<br> 先创建对象，再使用<code>对象名.方法名(实参)</code>的方式调用</li><li>方法自己调用自己(被成为方法递归)<br> 使用情况很少，又有栈内存溢出的风险，此处不再讲解</li></ol></li><li><p>方法的重载(Overload) 在同一个类中，功能相似，尽可能让这两个方法名称一致，形参列表不一致 方法重载与返回值类型无关与方法的修饰符列表无关，只与方法名+形参列表有关</p></li></ol><p>例子：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//方法覆盖</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Overload</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//此时分别依靠实参数据类型区分。</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">long</span> a <span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">double</span> a <span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法的三大特性" tabindex="-1"><a class="header-anchor" href="#方法的三大特性"><span>方法的三大特性</span></a></h3><p>Java的三大特性是Java中最基础也是最重要的概念 分别是：</p><ol><li>封装<br> 封装是将数据和方法隐藏在类的内部，只对外提供公共的访问方式。这有助于保护数据的完整性和安全性，同时简化了编程，使得代码更加模块化。</li><li>继承 继承允许一个类（子类）继承另一个类（父类）的属性和方法。这有助于实现代码的重用和扩展，提高软件开发的效率。</li><li>多态 多态是指不同的对象对同一消息做出不同的响应。它允许我们使用父类类型的引用指向子类对象，并根据实际对象类型调用相应的方法。多态性增强了代码的灵活性和可扩展性。</li></ol><h3 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span>封装</span></a></h3><ol><li><p>私有成员变量：将类的成员变量设置为私有（使用private关键字），确保这些变量只能在类的内部被访问和修改。外部代码无法直接访问或修改这些私有变量，从而保证了数据的安全性和完整性。</p></li><li><p>公共方法：私有成员变量不能被外部直接访问，但可以通过在类中定义公共方法（使用public关键字）来提供对这些私有变量的访问和修改。这些公共方法通常包括“getter”方法（用于获取私有变量的值）和“setter”方法（用于设置私有变量的值）。通过这种方式，外部代码可以通过调用这些公共方法来间接地访问和修改私有变量的值，而无需知道其内部实现细节。 代码实例：(User举例)</p></li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span></span>
<span class="line">   </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> age<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> sex<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h3><p>继承是面向对象编程（OOP）的四大基本特性之一，它允许我们根据已有的类来创建新类。这种机制有助于实现代码的重用，提高了软件开发的效率。在Java中，继承是通过使用关键字extends来实现的。</p><h4 id="_1-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-基本概念"><span>1.基本概念</span></a></h4><ol><li>父类与子类：被继承的类称为父类（或基类、超类），而继承的类则称为子类（或派生类）。子类可以从父类中继承属性和方法。</li><li>代码重用：通过继承，子类可以重用父类的代码，从而避免了重复编写相同的代码。这有助于减少代码的冗余，提高代码的可维护性。</li><li>扩展功能：子类可以在继承父类的基础上，添加新的属性和方法，从而扩展父类的功能。这使得子类能够更具体地满足特定的需求。</li></ol><h4 id="_2-java中的继承实现" tabindex="-1"><a class="header-anchor" href="#_2-java中的继承实现"><span>2. Java中的继承实现</span></a></h4><p>需要在子类的定义中使用extends关键字，并指定要继承的父类。<br> 例如：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//构造方法</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; is eating.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的构造方法  </span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; is barking.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，Dog类继承了Animal类。通过继承，Dog类获得了Animal类的name属性和eat方法。 同时，Dog类还添加了一个新的bark方法。</p><h4 id="_3-访问父类的成员" tabindex="-1"><a class="header-anchor" href="#_3-访问父类的成员"><span>3. 访问父类的成员</span></a></h4><p>继承的成员：子类可以访问父类的非私有成员。 使用super关键字：子类可以使用super关键字来引用父类的成员。</p><h4 id="_4-方法重写-overriding" tabindex="-1"><a class="header-anchor" href="#_4-方法重写-overriding"><span>4. 方法重写（Overriding）</span></a></h4><p>概念：子类可以提供一个与父类相同方法名、参数列表和返回类型的方法，从而覆盖父类中的方法实现。这被称为方法重写。 可以使用@Override注解来明确指示一个方法是重写了父类中的方法。</p><h4 id="_5-继承的层次结构" tabindex="-1"><a class="header-anchor" href="#_5-继承的层次结构"><span>5. 继承的层次结构</span></a></h4><p>多层继承：一个类可以继承自另一个已经继承了其他类的类，形成多层继承的层次结构。 接口与继承：除了类与类之间的继承，Java还支持接口与类之间的继承关系，这进一步丰富了面向对象编程的灵活性。</p><h4 id="_6-继承的优缺点" tabindex="-1"><a class="header-anchor" href="#_6-继承的优缺点"><span>6. 继承的优缺点</span></a></h4><p>优点：代码重用、扩展性好、易于维护。 缺点：可能导致类与类之间的耦合度过高，增加系统的复杂性；过多的继承层次可能导致性能下降。</p><h3 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h3><p>我们来看一个不使用多态的例子</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Master</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		d<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;小黑在啃骨头&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token class-name">Master</span> wu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token class-name">Dog</span> xiaohei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      wu<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>xiaohei<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述例子中我们要增加一个宠物的话，不仅需要新增一个类，还需要修改Master中的代码<br> 所以我们可以说Master类的拓展力很弱<br> 使用多态机制，我们创建一个名为pet的宠物类，使所有的宠物都继承这个类 然后让主人类去喂宠物类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Master</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Pet</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请重写此方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Pet</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;小黑在啃骨头&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token class-name">Master</span> wu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token class-name">Dog</span> xiaohei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      wu<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>xiaohei<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们再添加新的宠物时只需要让新的宠物继承宠物类即可，不需要再修改Master类了<br> 这样也就提高了Master类的拓展力</p><h3 id="补充" tabindex="-1"><a class="header-anchor" href="#补充"><span>补充</span></a></h3><p>向上转型(upcasting)<br> 子类转化父类型 称为： 自动类型转换<br> 向下转型(downcastinig)<br> 父类转化为子类型（需要加强制转化转换符）称为： 强制类型转换</p><p>instanceof 如何使用 格式：<code>引用 instanceof 数据类型名</code>例： <code>a instanceof Animal</code> 运算结果数据类型是布尔类型</p><p>true 表示 a 指向的对象是一个Animal类型 false 表示 a 指向的对象不是Animal类型</p><p>Java规范要求 强制类型转换前 使用instanceof运算符进项判断 避免出现以上异常</p><h2 id="重要关键字" tabindex="-1"><a class="header-anchor" href="#重要关键字"><span>重要关键字</span></a></h2><h3 id="this" tabindex="-1"><a class="header-anchor" href="#this"><span>this</span></a></h3><p>this的使用语法<code>this.</code>和<code>this()</code><br> this不能出现在静态方法中 this大部分情况都可以省略 this在区分局部变量和实例变量时不能省略(想想setter方法) this() 只能出现在构造方法的第一行，用来调用本类中相对应的构造方法</p><h3 id="super" tabindex="-1"><a class="header-anchor" href="#super"><span>super</span></a></h3><p>super的语法: <code>super.</code>和<code>super()</code> super不能出现在静态方法中<br> super大部分情况都可以省略<br> super()用来调用父类的构造方法</p><h3 id="final" tabindex="-1"><a class="header-anchor" href="#final"><span>final</span></a></h3><p>final是一个修饰符它有以下规则</p><ol><li>修饰的类不能被继承</li><li>修饰的方法不能被覆盖</li><li>修饰的变量只能赋值一次</li><li>修饰的实例变量必须手动赋值</li><li>修饰的引用指向一个对象之后不能发生改变</li><li>与<code>static</code> 一起修饰的变量被称为 <strong>常量</strong></li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//常量名全部大写</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="static" tabindex="-1"><a class="header-anchor" href="#static"><span>static</span></a></h3><ol><li>static用来修饰方法，被其修饰的方法可以通过<code>类名.方法名</code>的方式访问</li><li>static也可用来修饰变量，称为静态变量，静态变量在类加载的时候就完成了初始化，存放在方法区内存中</li><li>还可以用来定义<strong>静态代码块</strong></li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">static</span><span class="token punctuation">{</span></span>
<span class="line">    java语句<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态代码块在类加载时执行，并且只执行一次。<br> 其作用有初始化连接池，解析XML配置文件等等</p><h3 id="package-import" tabindex="-1"><a class="header-anchor" href="#package-import"><span>package &amp; import</span></a></h3><p>打包方便程序的管理 在程序的第一行，只能写一句。</p><p>包的命名规范：<br><code>公司域名倒叙 + 项目名 + 模块名 + 功能</code><br><code>要全部小写，并且用.隔开</code></p><p>导报语法格式：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">improt 类名<span class="token punctuation">;</span></span>
<span class="line">imptot 包名<span class="token punctuation">.</span>类名<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>*<em>注意：java.lang.<em>是java的核心类不需要手动引入</em></em><br> 使用IDEA打包和导包都会自动进行</p><h2 id="抽象类与接口" tabindex="-1"><a class="header-anchor" href="#抽象类与接口"><span>抽象类与接口</span></a></h2><h3 id="抽象类-很少使用" tabindex="-1"><a class="header-anchor" href="#抽象类-很少使用"><span>抽象类（很少使用）</span></a></h3><p><strong>概念</strong></p><ol><li>类和类之间具有共同特征，提取出来就是抽象类。<br> 例如小猫和小狗都是宠物，它们之间可以提取出宠物这个抽象类</li><li>由于类本身是不存在的，所以抽象类无法创建对象即：无法实例化</li><li>但是抽象类有自己的构造方法</li><li>所以抽象类只能被子类继承，子类可以被实例化</li><li>所以抽象类不能被final修饰，因为被fianl修饰的类无法被继承<br> 语法:</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> 类名<span class="token punctuation">{</span>类体<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="抽象方法-没有方法体的方法-未实现的方法" tabindex="-1"><a class="header-anchor" href="#抽象方法-没有方法体的方法-未实现的方法"><span>抽象方法（没有方法体的方法 / 未实现的方法）</span></a></h3><p>语法：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>抽象类中的抽象方法，如果被子类继承一定要覆盖。</p></blockquote><h3 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h3><p>完全抽象的抽象类，可以被称作特殊的抽象类，我们给他命名为<code>接口</code><br> 并且用全新的定义方法</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> <span class="token keyword">interface</span> 接口名<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>特点</strong></p><ol><li>接口可以继承多个接口</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">B</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>接口中只能有<code>常量</code>和<code>抽象方法</code></li><li>接口中的方法都是公开的并且是抽象的，所以在定义时可以省略<code>public abstract</code></li><li>接口中所有的变量都是常量所以也可以简写为</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">double</span> <span class="token constant">PI</span><span class="token operator">=</span><span class="token number">3.1415926</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>作用：与多态类似，面向接口编程，解耦合高拓展</p></blockquote><h3 id="与抽象类的区别" tabindex="-1"><a class="header-anchor" href="#与抽象类的区别"><span>与抽象类的区别</span></a></h3><ol><li>接口完全抽象，抽象类半抽象</li><li>接口没有构造方法，抽象类有构造方法</li><li>接口支持多继承，类和类只能单继承</li><li>一个类可以实现多个接口，抽象类只能继承一个抽象类</li><li>接口中只有常量和抽象方法</li></ol><h3 id="接口的实现" tabindex="-1"><a class="header-anchor" href="#接口的实现"><span>接口的实现</span></a></h3><p>类与类之间叫继承 类和接口之间的继承叫实现<code>impements</code></p><p>语法：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">MyMath</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyMathImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyMath</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>接口也可以和多态联合使用</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">MyMath</span> mm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyMathImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>类可以同时实现多个接口</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">B</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">C</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">B</span><span class="token punctuation">,</span><span class="token class-name">C</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">C</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个类可以继承另一个类的同时，实现一个接口</p><blockquote><p>注意：extends在前，implements 在后</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">C</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">A</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="object类" tabindex="-1"><a class="header-anchor" href="#object类"><span>Object类</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><p>Object是Java中所有类的跟类，是直接或间接父类。<br> 所以我们创建的任何类，如果没有指出继承的类，那么它默认会继承Object</p><p>Object中定义了一些基本的方法，这些方法在所有的对象中都可用，这些方法包括</p><h3 id="_1-boolean-equals-object-obj" tabindex="-1"><a class="header-anchor" href="#_1-boolean-equals-object-obj"><span>1. boolean equals(Object obj)</span></a></h3><p>源码如下:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//在Object中它直接用 == 来比较两个对象    </span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Object建议我们以后所有的类都重写这个方法<br> String类就重写了这个方法:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token comment">// 首先会直接比较两个对象指向的的内存地址</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">            <span class="token comment">//如果内存地址相同，就放回true</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">        <span class="token comment">// 接着在比较传入的anObject对象是否是String类型的实例</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">            <span class="token comment">// 如果是先将其强转为 String类型</span></span>
<span class="line">            <span class="token class-name">String</span> anotherString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>  </span>
<span class="line">            <span class="token comment">// 再求出其转为字符串后的长度</span></span>
<span class="line">            <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  </span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">                <span class="token comment">//如果长度相同</span></span>
<span class="line">                <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>  </span>
<span class="line">                <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  </span>
<span class="line">                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  </span>
<span class="line">                <span class="token comment">//逐字比较</span></span>
<span class="line">                <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  </span>
<span class="line">                        <span class="token comment">//有不相同的字符就返回false</span></span>
<span class="line">                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  </span>
<span class="line">                    i<span class="token operator">++</span><span class="token punctuation">;</span>  </span>
<span class="line">                <span class="token punctuation">}</span>  </span>
<span class="line">                <span class="token comment">// 到此处说明长度相同，且每个字符也都一致</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  </span>
<span class="line">            <span class="token punctuation">}</span>  </span>
<span class="line">            <span class="token comment">//到此处说明字符串的长度不一致</span></span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">        <span class="token comment">//到此处说明该类型不属于String类型</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-string-tostring" tabindex="-1"><a class="header-anchor" href="#_2-string-tostring"><span>2. String toString()</span></a></h3><p>源码如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;@&quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Object中toString()的方法也很基础<br> 只返回运行时类的名字通过<code>getClass().getName()</code>获取 和对象哈希码的十六进制表示，通过<code>Integer.toHexString(hashCode())</code>获取 也建议我们修改此方法，让其返回的是通俗易懂的信息<br> 以下是重写的例子:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">//我们定义了一个宠物狗类，他有name和age两个属性</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token comment">//我们通过重写toString()方法让其返回，狗狗的name + &quot;名称&quot; ， age + “年龄”的格式</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;Dog{name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;&#39;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-class-getclass" tabindex="-1"><a class="header-anchor" href="#_3-class-getclass"><span>3. Class&lt;?&gt; getClass()</span></a></h3><p>Object类中的<code>getClass()</code>方法是用于获取对象的运行时类的<code>Class</code>对象。<br> 这个方法返回一个表示该对象实际所属的类的<code>Class</code>实例。<br> 方法的声明如下:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//被\`final\`修饰，意味着不能被重写</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-hashcode" tabindex="-1"><a class="header-anchor" href="#_4-hashcode"><span>4.. hashCode()</span></a></h3><p>返回对象的哈希码值 这个方法的默认实现是本地方法(native method)，实现在JVM的本地代码</p><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><h3 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1"><span>概念</span></a></h3><ol><li>数组属于引用数据类型，其父类是Object</li><li>数组可以容纳多个元素。(数组是一个数据的集合)</li><li>数组可以存储<code>基本</code>和<code>引用</code>数据类型</li><li>数组是引用类型，所以存储再堆内存中</li><li>数组不能直接存储Java对象，但是可以存储其<code>引用</code>(内存地址)</li></ol><h4 id="分类-1" tabindex="-1"><a class="header-anchor" href="#分类-1"><span>分类</span></a></h4><ol><li>一维数组</li><li>二维数组</li><li>多维数组</li></ol><blockquote><p>二维数组本质就是每个元素是一个一维数组</p></blockquote><h4 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h4><ol><li>所有的数组都有<code>length</code>属性，用来获取数组中元素的个数。</li><li>数组中的元素要求类型统一</li><li>数组中元素的内存地址是连续的(内存地址是有规律的爱着排列)</li><li>数组是一种简单的数据结构</li><li>首元素的内存地址作为整个数组对象的内存地址</li><li>数组中每个元素都有下标，下标从0开始以1递增，最后一个元素的下标是<code>length - 1</code></li><li>数组中的元素在存或取时都是通过下标来进行</li></ol><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><p>通过下标检索效率极高，可以说是查询效率最高的数据结构 原因：内存地址连续、元素数据类型一致、占用大小一致、可以通过<code>偏移量</code>直接计算出来 因为是通过数学表达式计算出的元素的内存地址，那么10个元素和1w个元素的数组在检索时效率是一样的</p><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h4><ol><li>为了保证数组中元素地址连续，在随机增删时，后面的元素要统一向前或向后位移</li><li>不能存储大数据量(因为很难在内存空间上找到一块很大而且连续的内存空间)</li></ol><blockquote><p>注意： 对于最后一个元素的增删效率没有影响</p></blockquote><h4 id="补充-1" tabindex="-1"><a class="header-anchor" href="#补充-1"><span>补充</span></a></h4><p>数组的扩容 由于数组一旦确定，长度是不可变的 如果原数组存满，那么会建立一个新的更大的元素，并将原来的数组中元素拷贝到新的数组中。 所以数组拷贝的效率很低，尽量不要让数组扩容</p><p><code>System.arraycopy</code>源码：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//第一个是 源数组，第二个是开始位置，第三个是目标数组，第四个目标数组位置，第五个是拷贝长度</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">arraycopy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> src<span class="token punctuation">,</span><span class="token keyword">int</span> srcPos<span class="token punctuation">,</span><span class="token class-name">Object</span> dest<span class="token punctuation">,</span><span class="token keyword">int</span> destPos<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h3><p>以<code>int</code>类型数组举例</p><ol><li>静态初始化</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">2100</span><span class="token punctuation">,</span><span class="token number">513</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>动态初始化</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//此处的5表示数组中元素的个数</span></span>
<span class="line"><span class="token comment">//初始的五个元素都是int类型的默认值：0</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问时通过<code>数组对象[下标]</code>的方式访问例如<code>array[1]</code>表示访问下标为1的元素</p><p>遍历数组：(采用for循环遍历)</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//同样的方式可以实现倒序遍历</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外可以和多态联合使用如：</p><blockquote><p>Animal Cat Bird 三个类 Cat和Bird extends Animal</p></blockquote><p>可以创建Animal数组，存储其子类 <code>Animal[] animals = {new Cat(),new Bird()};</code> 如果要遍历子类中特有的方式时，可以在<code>for</code>循环中加上<code>instanceof</code>判断符</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>animals<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span>animals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二维数组" tabindex="-1"><a class="header-anchor" href="#二维数组"><span>二维数组</span></a></h3><p>二维数组可以理解为一个特殊的一维数组，它的每一个元素都是一个一维数组。</p><h4 id="初始化-1" tabindex="-1"><a class="header-anchor" href="#初始化-1"><span>初始化：</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//静态初始化</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//动态初始化</span></span>
<span class="line"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//意思是创建一个三行四列的二维数组。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="二维数组的遍历" tabindex="-1"><a class="header-anchor" href="#二维数组的遍历"><span>二维数组的遍历</span></a></h4><p>也是使用<code>for</code>循环遍历，但是数组内层也有一个一维数组，所以我们也要使用两个<code>for</code>循环嵌套来遍历数组。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> test<span class="token punctuation">{</span></span>
<span class="line">	</span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		</span>
<span class="line">		<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h2><h3 id="概念-2" tabindex="-1"><a class="header-anchor" href="#概念-2"><span>概念</span></a></h3><ol><li>程序执行过程中发生了不正常的情况，而这种不正常的情况就叫做：<code>异常</code></li><li>Java提供了异常的处理方式：Java吧该异常信息打印输出到控制台，供程序员参考。</li><li>程序员看到异常信息后，可以对程序进行修改。</li><li>异常在Java中都以<code>类</code>的形式存在</li><li>每一个异常类都可以创建对象</li></ol><p>例如:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> c <span class="token operator">=</span>a <span class="token operator">/</span> b <span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//JVM运行到这里的时候会new异常对象：</span></span>
<span class="line"><span class="token comment">//ArithmeticException(&quot;/ by zero&quot;)</span></span>
<span class="line"><span class="token comment">//并将对象抛出，打印到控制台。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异常的分类" tabindex="-1"><a class="header-anchor" href="#异常的分类"><span>异常的分类</span></a></h3><p><img src="`+p+`" alt="说明"><code>RuntimeException</code>不容易发生，不需要预先处理 <code>ExceptionSubClass</code>容易发生，必须在运行前进行预处理</p><p><strong>四种常见的异常：</strong></p><ol><li><code>NullPointerException</code> (空指针异常)</li><li><code>ClassCastException</code> (类型转换异常)</li><li><code>IndexOutOfBoundsException</code> (数组角标越界异常)</li><li><code>NumberFormatException</code> （数字格式化异常）</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//应该输入数字，所以会出现数字化格式异常</span></span>
<span class="line"><span class="token class-name">Inteager</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>s<span class="token operator">:</span><span class="token string">&quot;中文&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java对异常的处理方式" tabindex="-1"><a class="header-anchor" href="#java对异常的处理方式"><span>Java对异常的处理方式</span></a></h3><ol><li>在方法声明的位置上，使用<code>throws</code> 关键字<code>上抛</code>。</li><li>使用<code>try catch</code> 语句惊醒异常的<code>捕捉</code>。 语法：</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//可能出现异常的代码</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//处理异常</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意:</strong></p><ol><li>如果异常采用上抛的方式，在此方法中出现异常的位置后面的代码都不会执行。</li><li><code>try</code>语句块中出现异常的一行，其后面的代码也都不会执行。</li><li><code>catch</code> 可以写多个，自上而下，范围由小到大。</li><li>catch后面也可以采用|符号连接异常类型。</li></ol><h3 id="finally子句" tabindex="-1"><a class="header-anchor" href="#finally子句"><span>finally子句</span></a></h3><p><strong>特点：</strong></p><ol><li>用在<code>try catch</code>语句之后</li><li>子句中的代码一定会执行，即使<code>try</code>中出现异常</li><li><code>try</code>中有<code>return;</code>语句，子句中的代码也会执行</li><li><code>finally</code> 子句中通常写资源的释放/关闭。</li><li>如果<code>try</code>中有关闭虚拟机的指令<code>System.exit(status: 0);</code>finally就不会执行了</li></ol><p><strong>语法</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">try</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义异常" tabindex="-1"><a class="header-anchor" href="#自定义异常"><span>自定义异常</span></a></h3><p>SUN提供的异常不够用。以后业务出现的异常需要自己去自定义。 定义方式:</p><blockquote><p>步骤一：编写一个类去继承 Exception 或者 RuntimeException 步骤二：提供两个构造方法，一个无参构造方法，一个带有String的参数</p></blockquote><p>下面是一个实际使用自定义异常的例子： 首先，我们定义一个简单的自定义异常类<code>CustomException</code>:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们有一个简单的<code>Calculator</code>类，其中包含一个<code>divide</code>方法，这个方法在除数为<code>0</code>时抛出<code>CustomException</code>:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> numerator<span class="token punctuation">,</span> <span class="token keyword">int</span> denominator<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CustomException</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>denominator <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string">&quot;除数不能为0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">        <span class="token keyword">return</span> numerator <span class="token operator">/</span> denominator<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，在<code>main</code>方法中，我们调用<code>Calculator</code>的<code>divide</code>方法，并处理可能出现的<code>CustomException</code>异常：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span>  </span>
<span class="line">            <span class="token keyword">int</span> result <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;结果是: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CustomException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;捕获到自定义异常: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token punctuation">}</span>  </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，当尝试用10除以0时，<code>Calculator</code>类的<code>divide</code>方法会抛出一个<code>CustomException</code>。<code>main</code>方法中的<code>try-catch</code>块会捕获这个异常，并打印出异常信息。</p><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合"><span>集合</span></a></h2><p>集合是一个容器，可以容纳其他类型的数据，前面所讲的数组就是一个集合。 所有的集合相关的类和接口都在<code>java.util</code>包下</p><h3 id="特点-1" tabindex="-1"><a class="header-anchor" href="#特点-1"><span>特点</span></a></h3><ul><li>集合不能直接存储基本数据类型(但是代码上不需要体现，因为Java中有自动装箱)</li><li>另外集合不能直接存储Java对象，而是存储其<code>内存地址</code>也叫做<code>引用</code></li><li>不同集合，底层对应不同的数据结构</li><li>数据结构就是数据存储的结构，常见的结构有：<code>数组、二叉树、连败哦、哈希表</code>等。</li></ul><h3 id="分类-2" tabindex="-1"><a class="header-anchor" href="#分类-2"><span>分类</span></a></h3><p>Java中的集合分为两类 一类是以当个方式存储元素：java.util.Collection <img src="`+l+'" alt="集合的继承结构图"> 另一类是以<code>键值对</code>的方式存储元素：java.util.Map <img src="'+c+`" alt="Map集合的继承结构图"> 图中已经展现出各个集合的特点。</p><h3 id="总结常用集合" tabindex="-1"><a class="header-anchor" href="#总结常用集合"><span>总结常用集合</span></a></h3><table><thead><tr><th style="text-align:center;">集合</th><th style="text-align:center;">存储结构</th></tr></thead><tbody><tr><td style="text-align:center;">ArrayList</td><td style="text-align:center;">数组</td></tr><tr><td style="text-align:center;">LinkedList</td><td style="text-align:center;">双向链表</td></tr><tr><td style="text-align:center;">HashSet</td><td style="text-align:center;">底层是HashMap，其存储的元素等于HashMap的key</td></tr><tr><td style="text-align:center;">TreeSet</td><td style="text-align:center;">底层是TreeMap，其存储的元素等于TreeMap的key</td></tr><tr><td style="text-align:center;">HashMap</td><td style="text-align:center;">哈希表</td></tr><tr><td style="text-align:center;">Properties</td><td style="text-align:center;">线程安全，key和value只能存储String类型，常用做配置类</td></tr><tr><td style="text-align:center;">TreeMap</td><td style="text-align:center;">二叉树，key可以自动按大小排序</td></tr></tbody></table><h3 id="collection" tabindex="-1"><a class="header-anchor" href="#collection"><span>Collection</span></a></h3><p>Collection集合没有<code>泛型</code>时，可以存储Object的所有子类 但是存在<code>泛型</code>之后，只能存储泛型的类型</p><blockquote><p>注意：不能存放基本数据类型和对象本身，只能存储封装类或对象的内存地址。</p></blockquote><h4 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法"><span>常用方法</span></a></h4><table><thead><tr><th style="text-align:center;">常用方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">boolean add(E e)</td><td style="text-align:center;">向集合中添加一个元素，添加成功返回true</td></tr><tr><td style="text-align:center;">boolean remove(Object o)</td><td style="text-align:center;">删除某个元素，底层会调用equals方法进行对比，成功返回true</td></tr><tr><td style="text-align:center;">int size()</td><td style="text-align:center;">返回集合中元素的个数</td></tr><tr><td style="text-align:center;">boolean contains(Object o)</td><td style="text-align:center;">判断集合中是否包含改元素，底层调用equeals()，包含返回ture</td></tr><tr><td style="text-align:center;">boolean isEmpty()</td><td style="text-align:center;">判断集合是否为空，为空返回true</td></tr><tr><td style="text-align:center;">void clear()</td><td style="text-align:center;">清空改集合</td></tr><tr><td style="text-align:center;">Object[] toArray()</td><td style="text-align:center;">将集合转换为数组</td></tr></tbody></table><p>演示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">//多态，夫类型引用指向子类型对象</span></span>
<span class="line">	<span class="token class-name">Collection</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment">//向集合中添加一个元素1</span></span>
<span class="line">	<span class="token comment">/*注意Java在中存在自动装箱机制，实际上是：</span>
<span class="line">	Integer i = new Integer(1);</span>
<span class="line">	*/</span></span>
<span class="line">	c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment">//获取当前集合的元素个数，当前为1</span></span>
<span class="line">	<span class="token keyword">int</span> size <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">//判断当前集合中是否包含1，结果是ture</span></span>
<span class="line">	<span class="token keyword">boolean</span> isContains <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">//清空集合</span></span>
<span class="line">	c<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">//判断集合是否为空，结果为ture</span></span>
<span class="line">	<span class="token keyword">boolean</span> isEmpty <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iterator-迭代器" tabindex="-1"><a class="header-anchor" href="#iterator-迭代器"><span>Iterator 迭代器</span></a></h3><p>只有Collection集合才能被迭代器迭代，Map集合不可以使用</p><table><thead><tr><th style="text-align:center;">常用方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">boolean hasNext()</td><td style="text-align:center;">判断当前指向的元素后是否还存在元素</td></tr><tr><td style="text-align:center;">E next()</td><td style="text-align:center;">返回当前指向的元素，并且指向下一个元素</td></tr><tr><td style="text-align:center;">remove()</td><td style="text-align:center;">删除迭代器当前指向的元素</td></tr></tbody></table><p><strong>使用方法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">//首先需要准备一个Conllection的集合</span></span>
<span class="line">	<span class="token class-name">Collection</span> collections <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	collections<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;元素1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">	collections<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;元素n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment">//获取迭代器对象，改方法继承自Iterator接口</span></span>
<span class="line">	<span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> collections<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment">//判断当前元素后是否还有元素</span></span>
<span class="line">	<span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">//使用一个变量接收该元素后，并指向下一个元素</span></span>
<span class="line">	    <span class="token class-name">String</span> element <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	    <span class="token comment">//打印前面接收的元素</span></span>
<span class="line">	    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：在迭代的过程中，要删除集合中元素时，请使用迭代器的<code>remove</code>方法。 直接使用Collection中的方法，需要重新获取一个新的迭代器。</p><h3 id="list子类" tabindex="-1"><a class="header-anchor" href="#list子类"><span>List子类</span></a></h3><p>List作为Collection的子类，存在一些特有的方法 这些方法根据该集合的特点而来</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">void add(int index, E element)</td><td style="text-align:center;">向指定下标处添加元素</td></tr><tr><td style="text-align:center;">E get(int index)</td><td style="text-align:center;">获取指定下标的元素</td></tr><tr><td style="text-align:center;">E set(int index, E elemtnt)</td><td style="text-align:center;">修改指定下标的元素</td></tr><tr><td style="text-align:center;">int indexOf(Object o)</td><td style="text-align:center;">返回列表中第一次出现指定元素的索引，如果没有返回-1</td></tr><tr><td style="text-align:center;">int lastIndexOf(Object o)</td><td style="text-align:center;">返回列表中最后出现的指定元素的索引，如果没有返回-1</td></tr><tr><td style="text-align:center;">E remove(int index)</td><td style="text-align:center;">删除指定索引的元素</td></tr></tbody></table><h3 id="arraylist" tabindex="-1"><a class="header-anchor" href="#arraylist"><span>ArrayList</span></a></h3><p>特点：</p><ul><li>ArrayList不是线程安全的</li><li>默认的初始化容量是10</li><li>底层先创建一个长度为0的数组，添加第一个元素时长度变为10</li><li>集合的底层时一个Object数组</li></ul><p>构造方法：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认初始化方式</span></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定初始大小</span></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>一个集合<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//比如将HashSet转化为ArrayList</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组的扩容：</p><ul><li>增长到原容量的1.5倍</li></ul><p>面试题：ArrayList的优缺点</p><ul><li>ArrayList使用最多，与数组的特点相同</li><li>数组检索效率高//以后经常检索 (由于每个元素占用的空间大小相同，内存地址连续，知道首元素的地址，可根据偏移量计算出目标元素的内存地址)</li></ul><p>缺点：</p><ul><li>数组无法存储大数据量</li><li>随机增删元素效率低</li><li>末尾增删不受影响</li></ul><h3 id="linkedlist" tabindex="-1"><a class="header-anchor" href="#linkedlist"><span>LinkedList</span></a></h3><p>特点：</p><ul><li>底层存储在双向链表中</li><li>由三部分组成：<code>上一个节点的内存地址、数据、下一个节点的内存地址</code></li><li>没有初始化容量，<code>first</code>和<code>last</code>都是<code>null</code></li></ul><h3 id="vector-使用很少-了解即可" tabindex="-1"><a class="header-anchor" href="#vector-使用很少-了解即可"><span>Vector（使用很少，了解即可）</span></a></h3><ul><li>底层是数组</li><li>初始化容量是 10</li><li>扩容之后是原容量的二倍 10-20-40-80</li><li>Vector 都是线程同步/线程安全的，都带有synchronized关键字，使用较少</li></ul><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h3><p>与Collection没有关系 其存储方式以<code>key-value</code>的形式存储（key和value都是引用数据类型） 不能直接存储对象，只能存储对象的内存地址</p><blockquote><p>Set集合中的元素都等同于Map集合的Key</p></blockquote><p><strong>常用方法</strong></p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">V put(K key, V value)</td><td style="text-align:center;">向集合中添加键值对</td></tr><tr><td style="text-align:center;">V get(Object key)</td><td style="text-align:center;">通过key获取value</td></tr><tr><td style="text-align:center;">V remove(Object key)</td><td style="text-align:center;">通过key删除value</td></tr><tr><td style="text-align:center;">Collection&lt; V&gt; values()</td><td style="text-align:center;">获取所有的value</td></tr><tr><td style="text-align:center;">Set&lt; K&gt; keySet()</td><td style="text-align:center;">返回Map集合中所有的key</td></tr></tbody></table><h4 id="遍历方式" tabindex="-1"><a class="header-anchor" href="#遍历方式"><span>遍历方式</span></a></h4><p>方式一：先获取所有的key，再通过key来获取value</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">interator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">//取出一个key</span></span>
<span class="line">	<span class="token class-name">Integer</span> key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">//通过key获取value</span></span>
<span class="line">	<span class="token class-name">String</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">&quot;+&quot;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：将Map集合转化为Set集合 效率较高！！适合大数据量</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> it2 <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token class-name">Integer</span> key <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token class-name">String</span> value <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">&quot;=&quot;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hashmap" tabindex="-1"><a class="header-anchor" href="#hashmap"><span>HashMap</span></a></h3><p>特点：</p><ul><li>集合的默认初始化容量是16，默认加载因子是0.75</li><li>初始化容量必须是2的倍数</li><li>扩容是原来的二倍</li><li>默认加载因子是HashMap集合容量达到75%时数组开始扩容</li><li>非线程安全</li></ul><p>HashMap的源代码中有以下属性：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span> <span class="token comment">//实际上是key的hashCode()</span></span>
<span class="line"><span class="token keyword">final</span> <span class="token class-name">K</span> key</span>
<span class="line"><span class="token class-name">V</span> value</span>
<span class="line"><span class="token class-name">Node</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HashMap 集合允许key值为 null 但是HashMap集合的key null 值只能有一个</p><p><strong>了解内容：</strong> 如果hashcode();固定为某个值，会使hashMap变成单项列表 这种情况叫：散列分布不均匀 如果hashcode()全部不一样的，会使hashMap变成一维数组 也是散列分布不均匀</p><p><img src="`+i+`" alt="哈希表"></p><p>散列分布均匀需要重写hascode();有一定的技巧</p><p>【最终结论】 放在HashMap key部分的元素和HashSet的元素 需要同时重写equals();和hashcode();</p><h3 id="properties" tabindex="-1"><a class="header-anchor" href="#properties"><span>Properties</span></a></h3><p>特点：</p><ul><li>继承Hashtable</li><li>初始化容量是11，默认加载因子是0.75</li><li>扩容是原容量乘以2再加一</li><li>线程安全</li><li>key和value都是字符串，且不能为空</li></ul><table><thead><tr><th style="text-align:center;">常用方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">String getProperty(String key)</td><td style="text-align:center;">根据键值，获取属性</td></tr><tr><td style="text-align:center;">Object setProperty(String key, String value)</td><td style="text-align:center;">调用 Hashtable 的方法 put</td></tr></tbody></table><h3 id="treemap" tabindex="-1"><a class="header-anchor" href="#treemap"><span>TreeMap</span></a></h3><p>特点：</p><ul><li>底层是二叉树</li><li>无序不可重复，存入的值会自动按照大小排序（String按字典升序，Integer按大小升序）</li><li>对自定义的类进行排序时，需要声明比较规则。如果没有实现 java.lang.Comparable比较接口 JVM会报错</li></ul><h2 id="注解annotation" tabindex="-1"><a class="header-anchor" href="#注解annotation"><span>注解Annotation</span></a></h2><h3 id="概念-3" tabindex="-1"><a class="header-anchor" href="#概念-3"><span>概念</span></a></h3><p>注解：Annotation是一种引用数据类型，编译后生成.Class文件 是Java提供的一种元数据机制，它允许开发者在代码中添加额外的信息或标记。</p><ul><li><p>作用： 这些信息并不直接影响程序的执行逻辑，但可以被编译器、工具或运行时环境读取和使用。</p></li><li><p>格式 注解以“@”符号开头，后面跟着注解的名称和可选的参数。 例如：@SuppressWarnings(value=&quot;unchecked&quot;)</p></li><li><p>使用场景 可以附在package,class,method,field等上面。</p></li></ul><h3 id="java中自带的注解" tabindex="-1"><a class="header-anchor" href="#java中自带的注解"><span>Java中自带的注解</span></a></h3><table><thead><tr><th style="text-align:center;">注解</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">@Override</td><td style="text-align:center;">重写父类的方法</td></tr><tr><td style="text-align:center;">@Deprecated</td><td style="text-align:center;">以过时，不推荐使用</td></tr><tr><td style="text-align:center;">@SuppressWarning(&quot;value&quot;)</td><td style="text-align:center;">抑制警告，all表所有，unchecked表未检查</td></tr></tbody></table><h3 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解"><span>元注解</span></a></h3><p>作用：元注解负责解释其他注解 Java中定义了4个标准的<code>meta-annotation</code>类型在<code>java.lang.annotation</code>下</p><table><thead><tr><th style="text-align:center;">元注解</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">@Target</td><td style="text-align:center;">声明注解的使用范围</td></tr><tr><td style="text-align:center;">@Retention</td><td style="text-align:center;">一般都写为Runtime，运行时有效</td></tr><tr><td style="text-align:center;">@Document</td><td style="text-align:center;">该注解将被包含在javadoc中</td></tr><tr><td style="text-align:center;">@Inherited</td><td style="text-align:center;">子类可以结成父类中的该注解</td></tr></tbody></table><h3 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解"><span>自定义注解</span></a></h3><p>基本格式：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> <span class="token annotation punctuation">@interface</span> 注解类型名<span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">//注解的参数</span></span>
<span class="line">	<span class="token class-name">String</span> <span class="token function">name1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">//参数带有默认值</span></span>
<span class="line">	<span class="token class-name">String</span> <span class="token function">name2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;默认值&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要在注解添加参数，需要在自定义注解体中声明注解参数 参数类型 + 参数名 + ();</p><blockquote><p>注意：注解中只有一个属性时，建议名称为value</p></blockquote><h2 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程"><span>多线程</span></a></h2><h3 id="线程与进程" tabindex="-1"><a class="header-anchor" href="#线程与进程"><span>线程与进程</span></a></h3><ul><li>进程：一个应用就是一个进程，如360安全卫士本身是一个进程</li><li>线程：一个进程的执行单元，如360的电脑优化、木马查杀等功能</li></ul><p>作用：提高效率</p><blockquote><p>注意：两个<code>进程</code>的内存独立不共享，在Java语言中两个<code>线程</code>的<code>堆内存</code>和<code>方法区内存</code>共享，但是<code>栈</code>内存独立</p></blockquote><p>思考：使用了多线程之后main方法结束后，可能程序也不会结束。 因为main方法结束只是代表主线程结束了，主栈空了，其他栈(线程)可能还在。</p><h3 id="并发与并行" tabindex="-1"><a class="header-anchor" href="#并发与并行"><span>并发与并行</span></a></h3><ul><li>并发：再同一时刻，有多个指令在单个CPU上<code>交替</code>执行</li><li>并行：在同一时刻，在多个指令在多个CPU上<code>同时</code>进行</li></ul><h3 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式"><span>实现方式</span></a></h3><ol><li>继承Thread类，重写run方法</li><li>实现Runnable接口的方式</li><li>利用Callable接口和Future接口方式实现</li></ol><blockquote><p>方法三能够获取多线程执行结果</p></blockquote><p><strong>方式一</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//新建一个类，继承Thread类</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OneThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">//重写Run方法</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">//要多线程执行的代码</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">//创建新建类的实例</span></span>
<span class="line">		<span class="token class-name">OneThread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OneThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token comment">//开启线程</span></span>
<span class="line">		t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token comment">//如果要利用多个线程，只需要建多个实例对象</span></span>
<span class="line">		<span class="token class-name">OneThread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OneThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">OneThread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OneThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：start()方法的作用是：启动一个分支线程，在JVM中开辟一个新的栈空间，这段代码任务完成之后，瞬间结束。启动成功的线程会自动调用run()方法，并且run方法在分支栈的栈底部（压栈）</p><blockquote><p>main方法在主栈的栈底部，run方法在分支栈的栈底部。run和main是平级的 如果直接在main方法中调用run方法，相当于普通的调用方法，并不会开辟新的线程。</p></blockquote><p><strong>方式二</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//新建一个类，实现 Runnable接口</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">//实现run方法</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">//想要利用多线程执行的代码</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">MyThread</span> mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token comment">//开启线程</span></span>
<span class="line">		t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以采用匿名内部类的方式</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">			<span class="token annotation punctuation">@Override</span></span>
<span class="line">			<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">				<span class="token comment">//想要开启另一个线程执行的代码</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token comment">//开启线程</span></span>
<span class="line">		t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式三</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//新建一个类实现Callable接口</span></span>
<span class="line"><span class="token comment">//注意此处的泛型为结果的泛型，此处以返回整数型为例</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">//重写Callable中的call方法</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">//此处为要利用多线程执行的代码</span></span>
<span class="line">		<span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">return</span> number<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">//创建MyCallable的实例</span></span>
<span class="line">		<span class="token class-name">MyCallable</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token comment">//创建FutureTask的实例，用来管理多线程运行的结果</span></span>
<span class="line">		<span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>mc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">		<span class="token comment">//创建线程对象</span></span>
<span class="line">		<span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ft<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token comment">//启动线程</span></span>
<span class="line">		t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token comment">//获取多线程运行的结果</span></span>
<span class="line">		<span class="token keyword">int</span> result<span class="token operator">=</span> ft<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="thread-类中成员方法" tabindex="-1"><a class="header-anchor" href="#thread-类中成员方法"><span>Thread 类中成员方法</span></a></h3><table><thead><tr><th style="text-align:center;">基本方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">String getName()</td><td style="text-align:center;">获取线程的名字</td></tr><tr><td style="text-align:center;">void setName()</td><td style="text-align:center;">设置线程的名称(构造方法也可以设置名称)</td></tr><tr><td style="text-align:center;">static Thread currentThread()</td><td style="text-align:center;">获取当前线程的对象</td></tr><tr><td style="text-align:center;">static void sleep(Long time)</td><td style="text-align:center;">让线程休眠指定的时间ms</td></tr></tbody></table><blockquote><p>线程默认名称：Thread-0、 Thread-1 ...</p></blockquote><h3 id="优先级方法" tabindex="-1"><a class="header-anchor" href="#优先级方法"><span>优先级方法</span></a></h3><p>Java中采用抢占式调度，所有的线程都是随机执行的</p><table><thead><tr><th style="text-align:center;">优先级方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">setPriority(int newPriority)</td><td style="text-align:center;">设置线程的优先级</td></tr><tr><td style="text-align:center;">final int getProiority()</td><td style="text-align:center;">获取线程的优先级</td></tr></tbody></table><blockquote><p>Java中线程的优先级最低是<code>1</code>，最高是<code>10</code>，如果没有赋值，则<code>默认</code>是<code>5</code></p></blockquote><h3 id="守护线程" tabindex="-1"><a class="header-anchor" href="#守护线程"><span>守护线程</span></a></h3><p>final void setDaemon(boolean on)</p><blockquote><p>ture：设为守护线程</p></blockquote><p>当非守护线程执行结束之后，守护线程会陆续结束(即使代码块没有执行完毕)</p><h3 id="插入线程" tabindex="-1"><a class="header-anchor" href="#插入线程"><span>插入线程</span></a></h3><p>public final void join()</p><blockquote><p>将使用该方法的线程插入到当前方法之前。</p></blockquote><h3 id="线程的生命周期" tabindex="-1"><a class="header-anchor" href="#线程的生命周期"><span>线程的生命周期</span></a></h3><ol><li>刚创建线程对象的<code>新建状态</code></li><li>一直在抢夺执行权的<code>就绪状态</code></li><li>抢夺到执行权的<code>运行状态</code></li><li>遇到sleep或其他阻塞式方法的<code>阻塞状态</code></li><li>线程中代码执行完成后的<code>死亡状态</code></li></ol><p><img src="`+o+`" alt="线程的生命周期和状态"></p><p>注意：</p><ul><li>线程在<code>运行期间</code>有可能会被其他线程<code>抢走执行权</code>，从而回到<code>就绪状态</code></li><li>阻塞状态结束后，线程会回到就绪状态重新抢夺执行权</li></ul><h3 id="同步代码块" tabindex="-1"><a class="header-anchor" href="#同步代码块"><span>同步代码块</span></a></h3><p>由于Java中线程在执行的任何时间都会被抢夺走执行权，如果我们需要让这个线程执行完某个步骤才让其能被夺走，我们可以使用<code>锁</code>来“锁住”这个线程。</p><p>格式：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>锁对象<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	操作共享数据的代码</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：锁对象一定是唯一的，一般写为当前类的字节码文件对象如：MyThread.class</p></blockquote><p>特点：</p><ul><li>锁默认打开，有一个线程进去锁会自动关闭</li><li>里面的代码全部执行完毕，线程出来锁才会自动打开</li></ul><h3 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题"><span>面试题</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">MyThread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        	<span class="token comment">//此处会让t线程睡眠5s吗</span></span>
<span class="line">            t<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;T ---&gt; &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案是主线程睡眠5s，因为sleep方法是静态方法，不能通过对象来调用 代码中存在一个常见的误解关于Thread类的sleep方法的使用。在main方法中尝试调用t.sleep(5000);，这里的t是MyThread类的一个实例，而MyThread是Thread类的子类。然而，sleep方法是Thread类的静态方法，这意味着它应该直接通过类名调用，而不是通过Thread类的实例调用。</p><p>正确的调用方式应该是Thread.sleep(5000);，这样会让当前执行的线程（在这个上下文中是主线程）睡眠5秒。</p>`,388)]))}const v=s(u,[["render",r],["__file","get-started.html.vue"]]),m=JSON.parse('{"path":"/JavaEE/get-started.html","title":"JavaSE","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"引入","slug":"引入","link":"#引入","children":[]},{"level":2,"title":"第一个Java文件","slug":"第一个java文件","link":"#第一个java文件","children":[]},{"level":2,"title":"Java的加载与执行","slug":"java的加载与执行","link":"#java的加载与执行","children":[]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"范围与大小","slug":"范围与大小","link":"#范围与大小","children":[]},{"level":3,"title":"转换规则","slug":"转换规则","link":"#转换规则","children":[]}]},{"level":2,"title":"运算符","slug":"运算符","link":"#运算符","children":[{"level":3,"title":"算数运算符","slug":"算数运算符","link":"#算数运算符","children":[]},{"level":3,"title":"关系运算符","slug":"关系运算符","link":"#关系运算符","children":[]},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":3,"title":"条件运算符","slug":"条件运算符","link":"#条件运算符","children":[]}]},{"level":2,"title":"控制语句","slug":"控制语句","link":"#控制语句","children":[{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":3,"title":"1.if - else","slug":"_1-if-else","link":"#_1-if-else","children":[]},{"level":3,"title":"2. switch语句","slug":"_2-switch语句","link":"#_2-switch语句","children":[]},{"level":3,"title":"3. for循环","slug":"_3-for循环","link":"#_3-for循环","children":[]},{"level":3,"title":"foreach","slug":"foreach","link":"#foreach","children":[]},{"level":3,"title":"4. while循环","slug":"_4-while循环","link":"#_4-while循环","children":[]},{"level":3,"title":"5.控制语句break&continue","slug":"_5-控制语句break-continue","link":"#_5-控制语句break-continue","children":[]},{"level":3,"title":"6. 跳转语句","slug":"_6-跳转语句","link":"#_6-跳转语句","children":[]}]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":"基本概念","slug":"基本概念-1","link":"#基本概念-1","children":[]},{"level":3,"title":"方法的三大特性","slug":"方法的三大特性","link":"#方法的三大特性","children":[]},{"level":3,"title":"封装","slug":"封装","link":"#封装","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"多态","slug":"多态","link":"#多态","children":[]},{"level":3,"title":"补充","slug":"补充","link":"#补充","children":[]}]},{"level":2,"title":"重要关键字","slug":"重要关键字","link":"#重要关键字","children":[{"level":3,"title":"this","slug":"this","link":"#this","children":[]},{"level":3,"title":"super","slug":"super","link":"#super","children":[]},{"level":3,"title":"final","slug":"final","link":"#final","children":[]},{"level":3,"title":"static","slug":"static","link":"#static","children":[]},{"level":3,"title":"package & import","slug":"package-import","link":"#package-import","children":[]}]},{"level":2,"title":"抽象类与接口","slug":"抽象类与接口","link":"#抽象类与接口","children":[{"level":3,"title":"抽象类（很少使用）","slug":"抽象类-很少使用","link":"#抽象类-很少使用","children":[]},{"level":3,"title":"抽象方法（没有方法体的方法 / 未实现的方法）","slug":"抽象方法-没有方法体的方法-未实现的方法","link":"#抽象方法-没有方法体的方法-未实现的方法","children":[]},{"level":3,"title":"接口","slug":"接口","link":"#接口","children":[]},{"level":3,"title":"与抽象类的区别","slug":"与抽象类的区别","link":"#与抽象类的区别","children":[]},{"level":3,"title":"接口的实现","slug":"接口的实现","link":"#接口的实现","children":[]}]},{"level":2,"title":"Object类","slug":"object类","link":"#object类","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"1. boolean equals(Object obj)","slug":"_1-boolean-equals-object-obj","link":"#_1-boolean-equals-object-obj","children":[]},{"level":3,"title":"2. String toString()","slug":"_2-string-tostring","link":"#_2-string-tostring","children":[]},{"level":3,"title":"3. Class<?> getClass()","slug":"_3-class-getclass","link":"#_3-class-getclass","children":[]},{"level":3,"title":"4.. hashCode()","slug":"_4-hashcode","link":"#_4-hashcode","children":[]}]},{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[{"level":3,"title":"概念","slug":"概念-1","link":"#概念-1","children":[]},{"level":3,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":3,"title":"二维数组","slug":"二维数组","link":"#二维数组","children":[]}]},{"level":2,"title":"异常","slug":"异常","link":"#异常","children":[{"level":3,"title":"概念","slug":"概念-2","link":"#概念-2","children":[]},{"level":3,"title":"异常的分类","slug":"异常的分类","link":"#异常的分类","children":[]},{"level":3,"title":"Java对异常的处理方式","slug":"java对异常的处理方式","link":"#java对异常的处理方式","children":[]},{"level":3,"title":"finally子句","slug":"finally子句","link":"#finally子句","children":[]},{"level":3,"title":"自定义异常","slug":"自定义异常","link":"#自定义异常","children":[]}]},{"level":2,"title":"集合","slug":"集合","link":"#集合","children":[{"level":3,"title":"特点","slug":"特点-1","link":"#特点-1","children":[]},{"level":3,"title":"分类","slug":"分类-2","link":"#分类-2","children":[]},{"level":3,"title":"总结常用集合","slug":"总结常用集合","link":"#总结常用集合","children":[]},{"level":3,"title":"Collection","slug":"collection","link":"#collection","children":[]},{"level":3,"title":"Iterator  迭代器","slug":"iterator-迭代器","link":"#iterator-迭代器","children":[]},{"level":3,"title":"List子类","slug":"list子类","link":"#list子类","children":[]},{"level":3,"title":"ArrayList","slug":"arraylist","link":"#arraylist","children":[]},{"level":3,"title":"LinkedList","slug":"linkedlist","link":"#linkedlist","children":[]},{"level":3,"title":"Vector（使用很少，了解即可）","slug":"vector-使用很少-了解即可","link":"#vector-使用很少-了解即可","children":[]},{"level":3,"title":"Map","slug":"map","link":"#map","children":[]},{"level":3,"title":"HashMap","slug":"hashmap","link":"#hashmap","children":[]},{"level":3,"title":"Properties","slug":"properties","link":"#properties","children":[]},{"level":3,"title":"TreeMap","slug":"treemap","link":"#treemap","children":[]}]},{"level":2,"title":"注解Annotation","slug":"注解annotation","link":"#注解annotation","children":[{"level":3,"title":"概念","slug":"概念-3","link":"#概念-3","children":[]},{"level":3,"title":"Java中自带的注解","slug":"java中自带的注解","link":"#java中自带的注解","children":[]},{"level":3,"title":"元注解","slug":"元注解","link":"#元注解","children":[]},{"level":3,"title":"自定义注解","slug":"自定义注解","link":"#自定义注解","children":[]}]},{"level":2,"title":"多线程","slug":"多线程","link":"#多线程","children":[{"level":3,"title":"线程与进程","slug":"线程与进程","link":"#线程与进程","children":[]},{"level":3,"title":"并发与并行","slug":"并发与并行","link":"#并发与并行","children":[]},{"level":3,"title":"实现方式","slug":"实现方式","link":"#实现方式","children":[]},{"level":3,"title":"Thread 类中成员方法","slug":"thread-类中成员方法","link":"#thread-类中成员方法","children":[]},{"level":3,"title":"优先级方法","slug":"优先级方法","link":"#优先级方法","children":[]},{"level":3,"title":"守护线程","slug":"守护线程","link":"#守护线程","children":[]},{"level":3,"title":"插入线程","slug":"插入线程","link":"#插入线程","children":[]},{"level":3,"title":"线程的生命周期","slug":"线程的生命周期","link":"#线程的生命周期","children":[]},{"level":3,"title":"同步代码块","slug":"同步代码块","link":"#同步代码块","children":[]},{"level":3,"title":"面试题","slug":"面试题","link":"#面试题","children":[]}]}],"git":{},"filePathRelative":"JavaEE/get-started.md"}');export{v as comp,m as data};
